{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst oidc_client_ext_1 = require(\"@inrupt/oidc-client-ext\");\n\nclass ClientRegistrar {\n  constructor(storageUtility) {\n    this.storageUtility = storageUtility;\n  }\n\n  async getClient(options, issuerConfig) {\n    var _a;\n\n    const [storedClientId, storedClientSecret] = await Promise.all([this.storageUtility.getForUser(options.sessionId, \"clientId\", {\n      secure: false\n    }), this.storageUtility.getForUser(options.sessionId, \"clientSecret\", {\n      secure: false\n    })]);\n\n    if (storedClientId) {\n      return {\n        clientId: storedClientId,\n        clientSecret: storedClientSecret\n      };\n    }\n\n    const extendedOptions = { ...options\n    };\n    extendedOptions.registrationAccessToken = (_a = extendedOptions.registrationAccessToken) !== null && _a !== void 0 ? _a : await this.storageUtility.getForUser(options.sessionId, \"registrationAccessToken\");\n\n    try {\n      const registeredClient = await oidc_client_ext_1.registerClient(extendedOptions, issuerConfig);\n      const infoToSave = {\n        clientId: registeredClient.clientId\n      };\n\n      if (registeredClient.clientSecret) {\n        infoToSave.clientSecret = registeredClient.clientSecret;\n      }\n\n      if (registeredClient.idTokenSignedResponseAlg) {\n        infoToSave.idTokenSignedResponseAlg = registeredClient.idTokenSignedResponseAlg;\n      }\n\n      await this.storageUtility.setForUser(extendedOptions.sessionId, infoToSave, {\n        secure: false\n      });\n      return registeredClient;\n    } catch (error) {\n      throw new Error(`Client registration failed: [${error.toString()}]`);\n    }\n  }\n\n}\n\nexports.default = ClientRegistrar;","map":{"version":3,"sources":["../../../src/login/oidc/ClientRegistrar.ts"],"names":[],"mappings":";;;;;;AAiCA,MAAA,iBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAKA,MAAqB,eAArB,CAAoC;AAClC,EAAA,WAAA,CAAoB,cAApB,EAAmD;AAA/B,SAAA,cAAA,GAAA,cAAA;AAAmC;;AAExC,QAAT,SAAS,CACb,OADa,EAEb,YAFa,EAEc;;;AAG3B,UAAM,CACJ,cADI,EAEJ,kBAFI,IAIF,MAAM,OAAO,CAAC,GAAR,CAAY,CACpB,KAAK,cAAL,CAAoB,UAApB,CAA+B,OAAO,CAAC,SAAvC,EAAkD,UAAlD,EAA8D;AAC5D,MAAA,MAAM,EAAE;AADoD,KAA9D,CADoB,EAIpB,KAAK,cAAL,CAAoB,UAApB,CAA+B,OAAO,CAAC,SAAvC,EAAkD,cAAlD,EAAkE;AAChE,MAAA,MAAM,EAAE;AADwD,KAAlE,CAJoB,CAAZ,CAJV;;AAgBA,QAAI,cAAJ,EAAoB;AAClB,aAAO;AACL,QAAA,QAAQ,EAAE,cADL;AAEL,QAAA,YAAY,EAAE;AAFT,OAAP;AAID;;AACD,UAAM,eAAe,GAAG,EAAE,GAAG;AAAL,KAAxB;AAEA,IAAA,eAAe,CAAC,uBAAhB,GACE,CAAA,EAAA,GAAA,eAAe,CAAC,uBAAhB,MAAuC,IAAvC,IAAuC,EAAA,KAAA,KAAA,CAAvC,GAAuC,EAAvC,GACC,MAAM,KAAK,cAAL,CAAoB,UAApB,CACL,OAAO,CAAC,SADH,EAEL,yBAFK,CAFT;;AAOA,QAAI;AACF,YAAM,gBAAgB,GAAG,MAAM,iBAAA,CAAA,cAAA,CAC7B,eAD6B,EAE7B,YAF6B,CAA/B;AAKA,YAAM,UAAU,GAA2B;AACzC,QAAA,QAAQ,EAAE,gBAAgB,CAAC;AADc,OAA3C;;AAGA,UAAI,gBAAgB,CAAC,YAArB,EAAmC;AACjC,QAAA,UAAU,CAAC,YAAX,GAA0B,gBAAgB,CAAC,YAA3C;AACD;;AACD,UAAI,gBAAgB,CAAC,wBAArB,EAA+C;AAC7C,QAAA,UAAU,CAAC,wBAAX,GACE,gBAAgB,CAAC,wBADnB;AAED;;AACD,YAAM,KAAK,cAAL,CAAoB,UAApB,CACJ,eAAe,CAAC,SADZ,EAEJ,UAFI,EAGJ;AAIE,QAAA,MAAM,EAAE;AAJV,OAHI,CAAN;AAUA,aAAO,gBAAP;AACD,KA3BD,CA2BE,OAAO,KAAP,EAAc;AACd,YAAM,IAAI,KAAJ,CAAU,gCAAgC,KAAK,CAAC,QAAN,EAAgB,GAA1D,CAAN;AACD;AACF;;AArEiC;;AAApC,OAAA,CAAA,OAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst oidc_client_ext_1 = require(\"@inrupt/oidc-client-ext\");\nclass ClientRegistrar {\n    constructor(storageUtility) {\n        this.storageUtility = storageUtility;\n    }\n    async getClient(options, issuerConfig) {\n        var _a;\n        const [storedClientId, storedClientSecret,] = await Promise.all([\n            this.storageUtility.getForUser(options.sessionId, \"clientId\", {\n                secure: false,\n            }),\n            this.storageUtility.getForUser(options.sessionId, \"clientSecret\", {\n                secure: false,\n            }),\n        ]);\n        if (storedClientId) {\n            return {\n                clientId: storedClientId,\n                clientSecret: storedClientSecret,\n            };\n        }\n        const extendedOptions = { ...options };\n        extendedOptions.registrationAccessToken =\n            (_a = extendedOptions.registrationAccessToken) !== null && _a !== void 0 ? _a : (await this.storageUtility.getForUser(options.sessionId, \"registrationAccessToken\"));\n        try {\n            const registeredClient = await oidc_client_ext_1.registerClient(extendedOptions, issuerConfig);\n            const infoToSave = {\n                clientId: registeredClient.clientId,\n            };\n            if (registeredClient.clientSecret) {\n                infoToSave.clientSecret = registeredClient.clientSecret;\n            }\n            if (registeredClient.idTokenSignedResponseAlg) {\n                infoToSave.idTokenSignedResponseAlg =\n                    registeredClient.idTokenSignedResponseAlg;\n            }\n            await this.storageUtility.setForUser(extendedOptions.sessionId, infoToSave, {\n                secure: false,\n            });\n            return registeredClient;\n        }\n        catch (error) {\n            throw new Error(`Client registration failed: [${error.toString()}]`);\n        }\n    }\n}\nexports.default = ClientRegistrar;\n//# sourceMappingURL=ClientRegistrar.js.map"]},"metadata":{},"sourceType":"script"}