{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWebidFromTokenPayload = exports.fetchJwks = void 0;\n\nconst cross_fetch_1 = require(\"cross-fetch\");\n\nconst jose_legacy_modules_1 = require(\"@inrupt/jose-legacy-modules\");\n\nasync function fetchJwks(jwksIri, issuerIri) {\n  const jwksResponse = await cross_fetch_1.fetch(jwksIri);\n\n  if (jwksResponse.status !== 200) {\n    throw new Error(`Could not fetch JWKS for [${issuerIri}] at [${jwksIri}]: ${jwksResponse.status} ${jwksResponse.statusText}`);\n  }\n\n  let jwk;\n\n  try {\n    jwk = (await jwksResponse.json()).keys[0];\n  } catch (e) {\n    throw new Error(`Malformed JWKS for [${issuerIri}] at [${jwksIri}]: ${e.message}`);\n  }\n\n  return jwk;\n}\n\nexports.fetchJwks = fetchJwks;\n\nasync function getWebidFromTokenPayload(idToken, jwksIri, issuerIri, clientId) {\n  const jwk = await fetchJwks(jwksIri, issuerIri);\n  let payload;\n\n  try {\n    const {\n      payload: verifiedPayload\n    } = await jose_legacy_modules_1.jwtVerify(idToken, await jose_legacy_modules_1.parseJwk(jwk), {\n      issuer: issuerIri,\n      audience: clientId\n    });\n    payload = verifiedPayload;\n  } catch (e) {\n    throw new Error(`ID token verification failed: ${e.stack}`);\n  }\n\n  if (typeof payload.webid === \"string\") {\n    return payload.webid;\n  }\n\n  if (typeof payload.sub !== \"string\") {\n    throw new Error(`The ID token ${JSON.stringify(payload)} is invalid: it has no 'webid' claim and no 'sub' claim.`);\n  }\n\n  try {\n    new URL(payload.sub);\n    return payload.sub;\n  } catch (e) {\n    throw new Error(`The ID token has no 'webid' claim, and its 'sub' claim of [${payload.sub}] is invalid as a URL - error [${e}].`);\n  }\n}\n\nexports.getWebidFromTokenPayload = getWebidFromTokenPayload;","map":{"version":3,"sources":["../../../../src/login/oidc/redirectHandler/IRedirectHandler.ts"],"names":[],"mappings":";;;;;;;AA2BA,MAAA,aAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,qBAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AAsBO,eAAe,SAAf,CACL,OADK,EAEL,SAFK,EAEY;AAMjB,QAAM,YAAY,GAAG,MAAM,aAAA,CAAA,KAAA,CAAM,OAAN,CAA3B;;AACA,MAAI,YAAY,CAAC,MAAb,KAAwB,GAA5B,EAAiC;AAC/B,UAAM,IAAI,KAAJ,CACJ,6BAA6B,SAAS,SAAS,OAAO,MAAM,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,UAAU,EADtG,CAAN;AAGD;;AAED,MAAI,GAAJ;;AACA,MAAI;AACF,IAAA,GAAG,GAAG,CAAC,MAAM,YAAY,CAAC,IAAb,EAAP,EAA4B,IAA5B,CAAiC,CAAjC,CAAN;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,UAAM,IAAI,KAAJ,CACJ,uBAAuB,SAAS,SAAS,OAAO,MAAM,CAAC,CAAC,OAAO,EAD3D,CAAN;AAGD;;AACD,SAAO,GAAP;AACD;;AAxBD,OAAA,CAAA,SAAA,GAAA,SAAA;;AAmCO,eAAe,wBAAf,CACL,OADK,EAEL,OAFK,EAGL,SAHK,EAIL,QAJK,EAIW;AAEhB,QAAM,GAAG,GAAG,MAAM,SAAS,CAAC,OAAD,EAAU,SAAV,CAA3B;AACA,MAAI,OAAJ;;AACA,MAAI;AACF,UAAM;AAAE,MAAA,OAAO,EAAE;AAAX,QAA+B,MAAM,qBAAA,CAAA,SAAA,CACzC,OADyC,EAEzC,MAAM,qBAAA,CAAA,QAAA,CAAS,GAAT,CAFmC,EAGzC;AACE,MAAA,MAAM,EAAE,SADV;AAEE,MAAA,QAAQ,EAAE;AAFZ,KAHyC,CAA3C;AAQA,IAAA,OAAO,GAAG,eAAV;AACD,GAVD,CAUE,OAAO,CAAP,EAAU;AACV,UAAM,IAAI,KAAJ,CAAU,iCAAiC,CAAC,CAAC,KAAK,EAAlD,CAAN;AACD;;AAED,MAAI,OAAO,OAAO,CAAC,KAAf,KAAyB,QAA7B,EAAuC;AACrC,WAAO,OAAO,CAAC,KAAf;AACD;;AACD,MAAI,OAAO,OAAO,CAAC,GAAf,KAAuB,QAA3B,EAAqC;AACnC,UAAM,IAAI,KAAJ,CACJ,gBAAgB,IAAI,CAAC,SAAL,CACd,OADc,CAEf,0DAHG,CAAN;AAKD;;AACD,MAAI;AAKF,QAAI,GAAJ,CAAQ,OAAO,CAAC,GAAhB;AACA,WAAO,OAAO,CAAC,GAAf;AACD,GAPD,CAOE,OAAO,CAAP,EAAU;AACV,UAAM,IAAI,KAAJ,CACJ,8DAA8D,OAAO,CAAC,GAAG,kCAAkC,CAAC,IADxG,CAAN;AAGD;AACF;;AA5CD,OAAA,CAAA,wBAAA,GAAA,wBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getWebidFromTokenPayload = exports.fetchJwks = void 0;\nconst cross_fetch_1 = require(\"cross-fetch\");\nconst jose_legacy_modules_1 = require(\"@inrupt/jose-legacy-modules\");\nasync function fetchJwks(jwksIri, issuerIri) {\n    const jwksResponse = await cross_fetch_1.fetch(jwksIri);\n    if (jwksResponse.status !== 200) {\n        throw new Error(`Could not fetch JWKS for [${issuerIri}] at [${jwksIri}]: ${jwksResponse.status} ${jwksResponse.statusText}`);\n    }\n    let jwk;\n    try {\n        jwk = (await jwksResponse.json()).keys[0];\n    }\n    catch (e) {\n        throw new Error(`Malformed JWKS for [${issuerIri}] at [${jwksIri}]: ${e.message}`);\n    }\n    return jwk;\n}\nexports.fetchJwks = fetchJwks;\nasync function getWebidFromTokenPayload(idToken, jwksIri, issuerIri, clientId) {\n    const jwk = await fetchJwks(jwksIri, issuerIri);\n    let payload;\n    try {\n        const { payload: verifiedPayload } = await jose_legacy_modules_1.jwtVerify(idToken, await jose_legacy_modules_1.parseJwk(jwk), {\n            issuer: issuerIri,\n            audience: clientId,\n        });\n        payload = verifiedPayload;\n    }\n    catch (e) {\n        throw new Error(`ID token verification failed: ${e.stack}`);\n    }\n    if (typeof payload.webid === \"string\") {\n        return payload.webid;\n    }\n    if (typeof payload.sub !== \"string\") {\n        throw new Error(`The ID token ${JSON.stringify(payload)} is invalid: it has no 'webid' claim and no 'sub' claim.`);\n    }\n    try {\n        new URL(payload.sub);\n        return payload.sub;\n    }\n    catch (e) {\n        throw new Error(`The ID token has no 'webid' claim, and its 'sub' claim of [${payload.sub}] is invalid as a URL - error [${e}].`);\n    }\n}\nexports.getWebidFromTokenPayload = getWebidFromTokenPayload;\n//# sourceMappingURL=IRedirectHandler.js.map"]},"metadata":{},"sourceType":"script"}