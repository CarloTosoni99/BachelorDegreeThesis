{"ast":null,"code":"import { createSolidDataset, getSolidDataset, saveSolidDatasetAt, createThing, getThing, addUrl, getSourceUrl, getUrl, setThing, getStringNoLocale } from \"@inrupt/solid-client\";\nimport { solid, rdf, schema } from 'rdf-namespaces';\nexport async function getOrCreateDataset(containerUri, fetch, publicTypeIndexUri) {\n  //first possibility, public data\n  const publicTypeIndex = await getSolidDataset(publicTypeIndexUri);\n  const articleListThing = getThing(publicTypeIndex, \"https://carlotosoni99.inrupt.net/settings/publicTypeIndex.ttl#articlelist\");\n\n  if (articleListThing === null) {\n    const articlelistUri = containerUri + \"articlelist.ttl\";\n    return await initialiseArticlelist(articlelistUri, fetch, publicTypeIndex, publicTypeIndexUri);\n  }\n\n  const articlelistUri = getUrl(articleListThing, solid.instance);\n  return await getSolidDataset(articlelistUri); //second possibility, outdated\n\n  /*\n  const articlelistUri = containerUri + \"articlelist.ttl\";\n   try {\n    const articlelistDataset = await getSolidDataset(\n      articlelistUri,\n      {\n      fetch: fetch,\n      },\n    );\n    return articlelistDataset;\n  } catch(e) {\n    if(e.statusCode === 404) {\n      const articlelistDataset = await saveSolidDatasetAt(\n        articlelistUri,\n        createSolidDataset(),\n        {\n        fetch: fetch,\n        },\n      );\n      return articlelistDataset\n    }\n  }\n  return;\n  */\n} //first possibility part 2\n\nasync function initialiseArticlelist(articlelistUri, fetch, publicTypeIndex, publicTypeIndexUri) {\n  const listPublicType = getThing(publicTypeIndex, publicTypeIndexUri);\n  const attempt = getStringNoLocale(listPublicType, rdf.type);\n  const listPublicTypeWithRef = addUrl(listPublicType, \"http://purl.org/dc/terms/references\", articlelistUri);\n  const uploadedPublicTypeIndexRef = setThing(publicTypeIndex, listPublicTypeWithRef);\n  const newPublicTypeIndex = await saveSolidDatasetAt(publicTypeIndexUri, uploadedPublicTypeIndexRef, {\n    fetch: fetch\n  });\n  const articlelistDataset = await saveSolidDatasetAt(articlelistUri, createSolidDataset(), {\n    fetch: fetch\n  });\n  const newPublicThing = createThing({\n    url: \"https://carlotosoni99.inrupt.net/settings/publicTypeIndex.ttl#articlelist\"\n  });\n  const thingWithType = addUrl(newPublicThing, rdf.type, solid.TypeRegistration);\n  const thingWithForClass = addUrl(thingWithType, solid.forClass, schema.TextDigitalDocument);\n  const thingWithInstance = addUrl(thingWithForClass, solid.instance, getSourceUrl(articlelistDataset));\n  const uploadedPublicTypeIndex = setThing(newPublicTypeIndex, thingWithInstance);\n  await saveSolidDatasetAt(publicTypeIndexUri, uploadedPublicTypeIndex, {\n    fetch: fetch\n  });\n  return articlelistDataset;\n}","map":{"version":3,"sources":["/home/carlo/Desktop/Project/my-solid-blog-test/src/utils/GetOrCreateDataset.js"],"names":["createSolidDataset","getSolidDataset","saveSolidDatasetAt","createThing","getThing","addUrl","getSourceUrl","getUrl","setThing","getStringNoLocale","solid","rdf","schema","getOrCreateDataset","containerUri","fetch","publicTypeIndexUri","publicTypeIndex","articleListThing","articlelistUri","initialiseArticlelist","instance","listPublicType","attempt","type","listPublicTypeWithRef","uploadedPublicTypeIndexRef","newPublicTypeIndex","articlelistDataset","newPublicThing","url","thingWithType","TypeRegistration","thingWithForClass","forClass","TextDigitalDocument","thingWithInstance","uploadedPublicTypeIndex"],"mappings":"AAAA,SACEA,kBADF,EAEEC,eAFF,EAGEC,kBAHF,EAIEC,WAJF,EAKEC,QALF,EAMEC,MANF,EAOEC,YAPF,EAQEC,MARF,EASEC,QATF,EAUEC,iBAVF,QAWO,sBAXP;AAaA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,MAArB,QAAmC,gBAAnC;AAGA,OAAO,eAAeC,kBAAf,CAAkCC,YAAlC,EAAgDC,KAAhD,EAAuDC,kBAAvD,EAA2E;AAEhF;AACA,QAAMC,eAAe,GAAG,MAAMhB,eAAe,CAACe,kBAAD,CAA7C;AAEA,QAAME,gBAAgB,GAAGd,QAAQ,CAACa,eAAD,EAAkB,2EAAlB,CAAjC;;AAEA,MAAKC,gBAAgB,KAAK,IAA1B,EAAiC;AAC/B,UAAMC,cAAc,GAAGL,YAAY,GAAG,iBAAtC;AACA,WAAO,MAAMM,qBAAqB,CAACD,cAAD,EAAiBJ,KAAjB,EAAwBE,eAAxB,EAAyCD,kBAAzC,CAAlC;AACD;;AAED,QAAMG,cAAc,GAAGZ,MAAM,CAACW,gBAAD,EAAmBR,KAAK,CAACW,QAAzB,CAA7B;AAEA,SAAO,MAAMpB,eAAe,CAACkB,cAAD,CAA5B,CAdgF,CAgBhF;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC,C,CAGD;;AACA,eAAeC,qBAAf,CAAsCD,cAAtC,EAAsDJ,KAAtD,EAA6DE,eAA7D,EAA8ED,kBAA9E,EAAkG;AAEhG,QAAMM,cAAc,GAAGlB,QAAQ,CAC7Ba,eAD6B,EAE7BD,kBAF6B,CAA/B;AAKA,QAAMO,OAAO,GAAGd,iBAAiB,CAACa,cAAD,EAAiBX,GAAG,CAACa,IAArB,CAAjC;AAEA,QAAMC,qBAAqB,GAAGpB,MAAM,CAClCiB,cADkC,EAElC,qCAFkC,EAGlCH,cAHkC,CAApC;AAMA,QAAMO,0BAA0B,GAAGlB,QAAQ,CACzCS,eADyC,EAEzCQ,qBAFyC,CAA3C;AAKA,QAAME,kBAAkB,GAAG,MAAMzB,kBAAkB,CACjDc,kBADiD,EAEjDU,0BAFiD,EAGjD;AACEX,IAAAA,KAAK,EAAEA;AADT,GAHiD,CAAnD;AAQA,QAAMa,kBAAkB,GAAG,MAAM1B,kBAAkB,CACjDiB,cADiD,EAEjDnB,kBAAkB,EAF+B,EAGjD;AACAe,IAAAA,KAAK,EAAEA;AADP,GAHiD,CAAnD;AAQA,QAAMc,cAAc,GAAG1B,WAAW,CAAC;AAAC2B,IAAAA,GAAG,EAAE;AAAN,GAAD,CAAlC;AAEA,QAAMC,aAAa,GAAG1B,MAAM,CAC1BwB,cAD0B,EAE1BlB,GAAG,CAACa,IAFsB,EAG1Bd,KAAK,CAACsB,gBAHoB,CAA5B;AAMA,QAAMC,iBAAiB,GAAG5B,MAAM,CAC9B0B,aAD8B,EAE9BrB,KAAK,CAACwB,QAFwB,EAG9BtB,MAAM,CAACuB,mBAHuB,CAAhC;AAMA,QAAMC,iBAAiB,GAAG/B,MAAM,CAC9B4B,iBAD8B,EAE9BvB,KAAK,CAACW,QAFwB,EAG9Bf,YAAY,CAACsB,kBAAD,CAHkB,CAAhC;AAMA,QAAMS,uBAAuB,GAAG7B,QAAQ,CACtCmB,kBADsC,EAEtCS,iBAFsC,CAAxC;AAKA,QAAMlC,kBAAkB,CACtBc,kBADsB,EAEtBqB,uBAFsB,EAGtB;AACEtB,IAAAA,KAAK,EAAEA;AADT,GAHsB,CAAxB;AAQA,SAAOa,kBAAP;AACD","sourcesContent":["import {\n  createSolidDataset,\n  getSolidDataset,\n  saveSolidDatasetAt,\n  createThing,\n  getThing,\n  addUrl,\n  getSourceUrl,\n  getUrl,\n  setThing,\n  getStringNoLocale,\n} from \"@inrupt/solid-client\";\n\nimport { solid, rdf, schema } from 'rdf-namespaces';\n\n\nexport async function getOrCreateDataset(containerUri, fetch, publicTypeIndexUri) {\n\n  //first possibility, public data\n  const publicTypeIndex = await getSolidDataset(publicTypeIndexUri);\n\n  const articleListThing = getThing(publicTypeIndex, \"https://carlotosoni99.inrupt.net/settings/publicTypeIndex.ttl#articlelist\");\n\n  if ( articleListThing === null ) {\n    const articlelistUri = containerUri + \"articlelist.ttl\";\n    return await initialiseArticlelist(articlelistUri, fetch, publicTypeIndex, publicTypeIndexUri);\n  }\n\n  const articlelistUri = getUrl(articleListThing, solid.instance);\n\n  return await getSolidDataset(articlelistUri);\n\n  //second possibility, outdated\n  /*\n  const articlelistUri = containerUri + \"articlelist.ttl\";\n\n  try {\n    const articlelistDataset = await getSolidDataset(\n      articlelistUri,\n      {\n      fetch: fetch,\n      },\n    );\n    return articlelistDataset;\n  } catch(e) {\n    if(e.statusCode === 404) {\n      const articlelistDataset = await saveSolidDatasetAt(\n        articlelistUri,\n        createSolidDataset(),\n        {\n        fetch: fetch,\n        },\n      );\n      return articlelistDataset\n    }\n  }\n  return;\n  */\n}\n\n\n//first possibility part 2\nasync function initialiseArticlelist (articlelistUri, fetch, publicTypeIndex, publicTypeIndexUri) {\n\n  const listPublicType = getThing(\n    publicTypeIndex,\n    publicTypeIndexUri,\n  );\n\n  const attempt = getStringNoLocale(listPublicType, rdf.type);\n\n  const listPublicTypeWithRef = addUrl(\n    listPublicType,\n    \"http://purl.org/dc/terms/references\",\n    articlelistUri,\n  );\n\n  const uploadedPublicTypeIndexRef = setThing(\n    publicTypeIndex,\n    listPublicTypeWithRef,\n  );\n\n  const newPublicTypeIndex = await saveSolidDatasetAt(\n    publicTypeIndexUri,\n    uploadedPublicTypeIndexRef,\n    {\n      fetch: fetch,\n    },\n  )\n\n  const articlelistDataset = await saveSolidDatasetAt(\n    articlelistUri,\n    createSolidDataset(),\n    {\n    fetch: fetch,\n    },\n  );\n\n  const newPublicThing = createThing({url: \"https://carlotosoni99.inrupt.net/settings/publicTypeIndex.ttl#articlelist\"});\n\n  const thingWithType = addUrl(\n    newPublicThing,\n    rdf.type,\n    solid.TypeRegistration,\n  );\n\n  const thingWithForClass = addUrl(\n    thingWithType,\n    solid.forClass,\n    schema.TextDigitalDocument\n  );\n\n  const thingWithInstance = addUrl(\n    thingWithForClass,\n    solid.instance,\n    getSourceUrl(articlelistDataset),\n  );\n\n  const uploadedPublicTypeIndex = setThing(\n    newPublicTypeIndex,\n    thingWithInstance,\n  );\n\n  await saveSolidDatasetAt(\n    publicTypeIndexUri,\n    uploadedPublicTypeIndex,\n    {\n      fetch: fetch,\n    },  \n  );\n\n  return articlelistDataset;\n}"]},"metadata":{},"sourceType":"module"}