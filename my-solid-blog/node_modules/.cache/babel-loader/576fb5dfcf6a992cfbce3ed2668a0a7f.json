{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WELL_KNOWN_OPENID_CONFIG = void 0;\n\nconst solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\n\nconst urlPath_1 = require(\"../../util/urlPath\");\n\nexports.WELL_KNOWN_OPENID_CONFIG = \".well-known/openid-configuration\";\nconst issuerConfigKeyMap = {\n  issuer: {\n    toKey: \"issuer\",\n    convertToUrl: true\n  },\n  authorization_endpoint: {\n    toKey: \"authorizationEndpoint\",\n    convertToUrl: true\n  },\n  token_endpoint: {\n    toKey: \"tokenEndpoint\",\n    convertToUrl: true\n  },\n  userinfo_endpoint: {\n    toKey: \"userinfoEndpoint\",\n    convertToUrl: true\n  },\n  jwks_uri: {\n    toKey: \"jwksUri\",\n    convertToUrl: true\n  },\n  registration_endpoint: {\n    toKey: \"registrationEndpoint\",\n    convertToUrl: true\n  },\n  scopes_supported: {\n    toKey: \"scopesSupported\"\n  },\n  response_types_supported: {\n    toKey: \"responseTypesSupported\"\n  },\n  response_modes_supported: {\n    toKey: \"responseModesSupported\"\n  },\n  grant_types_supported: {\n    toKey: \"grantTypesSupported\"\n  },\n  acr_values_supported: {\n    toKey: \"acrValuesSupported\"\n  },\n  subject_types_supported: {\n    toKey: \"subjectTypesSupported\"\n  },\n  id_token_signing_alg_values_supported: {\n    toKey: \"idTokenSigningAlgValuesSupported\"\n  },\n  id_token_encryption_alg_values_supported: {\n    toKey: \"idTokenEncryptionAlgValuesSupported\"\n  },\n  id_token_encryption_enc_values_supported: {\n    toKey: \"idTokenEncryptionEncValuesSupported\"\n  },\n  userinfo_signing_alg_values_supported: {\n    toKey: \"userinfoSigningAlgValuesSupported\"\n  },\n  userinfo_encryption_alg_values_supported: {\n    toKey: \"userinfoEncryptionAlgValuesSupported\"\n  },\n  userinfo_encryption_enc_values_supported: {\n    toKey: \"userinfoEncryptionEncValuesSupported\"\n  },\n  request_object_signing_alg_values_supported: {\n    toKey: \"requestObjectSigningAlgValuesSupported\"\n  },\n  request_object_encryption_alg_values_supported: {\n    toKey: \"requestObjectEncryptionAlgValuesSupported\"\n  },\n  request_object_encryption_enc_values_supported: {\n    toKey: \"requestObjectEncryptionEncValuesSupported\"\n  },\n  token_endpoint_auth_methods_supported: {\n    toKey: \"tokenEndpointAuthMethodsSupported\"\n  },\n  token_endpoint_auth_signing_alg_values_supported: {\n    toKey: \"tokenEndpointAuthSigningAlgValuesSupported\"\n  },\n  display_values_supported: {\n    toKey: \"displayValuesSupported\"\n  },\n  claim_types_supported: {\n    toKey: \"claimTypesSupported\"\n  },\n  claims_supported: {\n    toKey: \"claimsSupported\"\n  },\n  service_documentation: {\n    toKey: \"serviceDocumentation\"\n  },\n  claims_locales_supported: {\n    toKey: \"claimsLocalesSupported\"\n  },\n  ui_locales_supported: {\n    toKey: \"uiLocalesSupported\"\n  },\n  claims_parameter_supported: {\n    toKey: \"claimsParameterSupported\"\n  },\n  request_parameter_supported: {\n    toKey: \"requestParameterSupported\"\n  },\n  request_uri_parameter_supported: {\n    toKey: \"requestUriParameterSupported\"\n  },\n  require_request_uri_registration: {\n    toKey: \"requireRequestUriRegistration\"\n  },\n  op_policy_uri: {\n    toKey: \"opPolicyUri\",\n    convertToUrl: true\n  },\n  op_tos_uri: {\n    toKey: \"opTosUri\",\n    convertToUrl: true\n  },\n  solid_oidc_supported: {\n    toKey: \"solidOidcSupported\"\n  }\n};\n\nfunction processConfig(config) {\n  const parsedConfig = {};\n  Object.keys(config).forEach(key => {\n    if (issuerConfigKeyMap[key]) {\n      parsedConfig[issuerConfigKeyMap[key].toKey] = config[key];\n    }\n  });\n  return parsedConfig;\n}\n\nclass IssuerConfigFetcher {\n  constructor(storageUtility) {\n    this.storageUtility = storageUtility;\n  }\n\n  static getLocalStorageKey(issuer) {\n    return `issuerConfig:${issuer}`;\n  }\n\n  async fetchConfig(issuer) {\n    let issuerConfig;\n    const openIdConfigUrl = urlPath_1.appendToUrlPathname(issuer, exports.WELL_KNOWN_OPENID_CONFIG);\n    const issuerConfigRequestBody = await window.fetch(openIdConfigUrl);\n\n    try {\n      issuerConfig = processConfig(await issuerConfigRequestBody.json());\n    } catch (err) {\n      throw new solid_client_authn_core_1.ConfigurationError(`[${issuer.toString()}] has an invalid configuration: ${err.message}`);\n    }\n\n    await this.storageUtility.set(IssuerConfigFetcher.getLocalStorageKey(issuer), JSON.stringify(issuerConfig));\n    return issuerConfig;\n  }\n\n}\n\nexports.default = IssuerConfigFetcher;","map":{"version":3,"sources":["../../../src/login/oidc/IssuerConfigFetcher.ts"],"names":[],"mappings":";;;;;;;AA6BA,MAAA,yBAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;;AAMA,MAAA,SAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEa,OAAA,CAAA,wBAAA,GAA2B,kCAA3B;AAGb,MAAM,kBAAkB,GAGpB;AACF,EAAA,MAAM,EAAE;AACN,IAAA,KAAK,EAAE,QADD;AAEN,IAAA,YAAY,EAAE;AAFR,GADN;AAKF,EAAA,sBAAsB,EAAE;AACtB,IAAA,KAAK,EAAE,uBADe;AAEtB,IAAA,YAAY,EAAE;AAFQ,GALtB;AASF,EAAA,cAAc,EAAE;AACd,IAAA,KAAK,EAAE,eADO;AAEd,IAAA,YAAY,EAAE;AAFA,GATd;AAaF,EAAA,iBAAiB,EAAE;AACjB,IAAA,KAAK,EAAE,kBADU;AAEjB,IAAA,YAAY,EAAE;AAFG,GAbjB;AAiBF,EAAA,QAAQ,EAAE;AACR,IAAA,KAAK,EAAE,SADC;AAER,IAAA,YAAY,EAAE;AAFN,GAjBR;AAqBF,EAAA,qBAAqB,EAAE;AACrB,IAAA,KAAK,EAAE,sBADc;AAErB,IAAA,YAAY,EAAE;AAFO,GArBrB;AAyBF,EAAA,gBAAgB,EAAE;AAAE,IAAA,KAAK,EAAE;AAAT,GAzBhB;AA0BF,EAAA,wBAAwB,EAAE;AAAE,IAAA,KAAK,EAAE;AAAT,GA1BxB;AA2BF,EAAA,wBAAwB,EAAE;AAAE,IAAA,KAAK,EAAE;AAAT,GA3BxB;AA4BF,EAAA,qBAAqB,EAAE;AAAE,IAAA,KAAK,EAAE;AAAT,GA5BrB;AA6BF,EAAA,oBAAoB,EAAE;AAAE,IAAA,KAAK,EAAE;AAAT,GA7BpB;AA8BF,EAAA,uBAAuB,EAAE;AAAE,IAAA,KAAK,EAAE;AAAT,GA9BvB;AA+BF,EAAA,qCAAqC,EAAE;AACrC,IAAA,KAAK,EAAE;AAD8B,GA/BrC;AAkCF,EAAA,wCAAwC,EAAE;AACxC,IAAA,KAAK,EAAE;AADiC,GAlCxC;AAqCF,EAAA,wCAAwC,EAAE;AACxC,IAAA,KAAK,EAAE;AADiC,GArCxC;AAwCF,EAAA,qCAAqC,EAAE;AACrC,IAAA,KAAK,EAAE;AAD8B,GAxCrC;AA2CF,EAAA,wCAAwC,EAAE;AACxC,IAAA,KAAK,EAAE;AADiC,GA3CxC;AA8CF,EAAA,wCAAwC,EAAE;AACxC,IAAA,KAAK,EAAE;AADiC,GA9CxC;AAiDF,EAAA,2CAA2C,EAAE;AAC3C,IAAA,KAAK,EAAE;AADoC,GAjD3C;AAoDF,EAAA,8CAA8C,EAAE;AAC9C,IAAA,KAAK,EAAE;AADuC,GApD9C;AAuDF,EAAA,8CAA8C,EAAE;AAC9C,IAAA,KAAK,EAAE;AADuC,GAvD9C;AA0DF,EAAA,qCAAqC,EAAE;AACrC,IAAA,KAAK,EAAE;AAD8B,GA1DrC;AA6DF,EAAA,gDAAgD,EAAE;AAChD,IAAA,KAAK,EAAE;AADyC,GA7DhD;AAgEF,EAAA,wBAAwB,EAAE;AAAE,IAAA,KAAK,EAAE;AAAT,GAhExB;AAiEF,EAAA,qBAAqB,EAAE;AAAE,IAAA,KAAK,EAAE;AAAT,GAjErB;AAkEF,EAAA,gBAAgB,EAAE;AAAE,IAAA,KAAK,EAAE;AAAT,GAlEhB;AAmEF,EAAA,qBAAqB,EAAE;AAAE,IAAA,KAAK,EAAE;AAAT,GAnErB;AAoEF,EAAA,wBAAwB,EAAE;AAAE,IAAA,KAAK,EAAE;AAAT,GApExB;AAqEF,EAAA,oBAAoB,EAAE;AAAE,IAAA,KAAK,EAAE;AAAT,GArEpB;AAsEF,EAAA,0BAA0B,EAAE;AAAE,IAAA,KAAK,EAAE;AAAT,GAtE1B;AAuEF,EAAA,2BAA2B,EAAE;AAAE,IAAA,KAAK,EAAE;AAAT,GAvE3B;AAwEF,EAAA,+BAA+B,EAAE;AAAE,IAAA,KAAK,EAAE;AAAT,GAxE/B;AAyEF,EAAA,gCAAgC,EAAE;AAAE,IAAA,KAAK,EAAE;AAAT,GAzEhC;AA0EF,EAAA,aAAa,EAAE;AACb,IAAA,KAAK,EAAE,aADM;AAEb,IAAA,YAAY,EAAE;AAFD,GA1Eb;AA8EF,EAAA,UAAU,EAAE;AACV,IAAA,KAAK,EAAE,UADG;AAEV,IAAA,YAAY,EAAE;AAFJ,GA9EV;AAkFF,EAAA,oBAAoB,EAAE;AACpB,IAAA,KAAK,EAAE;AADa;AAlFpB,CAHJ;;AA2FA,SAAS,aAAT,CACE,MADF,EAC2C;AAEzC,QAAM,YAAY,GAAsC,EAAxD;AACA,EAAA,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA6B,GAAD,IAAQ;AAClC,QAAI,kBAAkB,CAAC,GAAD,CAAtB,EAA6B;AAK3B,MAAA,YAAY,CAAC,kBAAkB,CAAC,GAAD,CAAlB,CAAwB,KAAzB,CAAZ,GAA8C,MAAM,CAAC,GAAD,CAApD;AACD;AACF,GARD;AAUA,SAAO,YAAP;AACD;;AAKD,MAAqB,mBAArB,CAAwC;AACtC,EAAA,WAAA,CAAoB,cAApB,EAAmD;AAA/B,SAAA,cAAA,GAAA,cAAA;AAAmC;;AAIvB,SAAlB,kBAAkB,CAAC,MAAD,EAAe;AAC7C,WAAO,gBAAgB,MAAM,EAA7B;AACD;;AAEgB,QAAX,WAAW,CAAC,MAAD,EAAe;AAC9B,QAAI,YAAJ;AAEA,UAAM,eAAe,GAAG,SAAA,CAAA,mBAAA,CACtB,MADsB,EAEtB,OAAA,CAAA,wBAFsB,CAAxB;AAIA,UAAM,uBAAuB,GAAG,MAAM,MAAM,CAAC,KAAP,CAAa,eAAb,CAAtC;;AAEA,QAAI;AACF,MAAA,YAAY,GAAG,aAAa,CAAC,MAAM,uBAAuB,CAAC,IAAxB,EAAP,CAA5B;AACD,KAFD,CAEE,OAAO,GAAP,EAAY;AACZ,YAAM,IAAI,yBAAA,CAAA,kBAAJ,CACJ,IAAI,MAAM,CAAC,QAAP,EAAiB,mCAAmC,GAAG,CAAC,OAAO,EAD/D,CAAN;AAGD;;AAGD,UAAM,KAAK,cAAL,CAAoB,GAApB,CACJ,mBAAmB,CAAC,kBAApB,CAAuC,MAAvC,CADI,EAEJ,IAAI,CAAC,SAAL,CAAe,YAAf,CAFI,CAAN;AAKA,WAAO,YAAP;AACD;;AAjCqC;;AAAxC,OAAA,CAAA,OAAA,GAAA,mBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WELL_KNOWN_OPENID_CONFIG = void 0;\nconst solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\nconst urlPath_1 = require(\"../../util/urlPath\");\nexports.WELL_KNOWN_OPENID_CONFIG = \".well-known/openid-configuration\";\nconst issuerConfigKeyMap = {\n    issuer: {\n        toKey: \"issuer\",\n        convertToUrl: true,\n    },\n    authorization_endpoint: {\n        toKey: \"authorizationEndpoint\",\n        convertToUrl: true,\n    },\n    token_endpoint: {\n        toKey: \"tokenEndpoint\",\n        convertToUrl: true,\n    },\n    userinfo_endpoint: {\n        toKey: \"userinfoEndpoint\",\n        convertToUrl: true,\n    },\n    jwks_uri: {\n        toKey: \"jwksUri\",\n        convertToUrl: true,\n    },\n    registration_endpoint: {\n        toKey: \"registrationEndpoint\",\n        convertToUrl: true,\n    },\n    scopes_supported: { toKey: \"scopesSupported\" },\n    response_types_supported: { toKey: \"responseTypesSupported\" },\n    response_modes_supported: { toKey: \"responseModesSupported\" },\n    grant_types_supported: { toKey: \"grantTypesSupported\" },\n    acr_values_supported: { toKey: \"acrValuesSupported\" },\n    subject_types_supported: { toKey: \"subjectTypesSupported\" },\n    id_token_signing_alg_values_supported: {\n        toKey: \"idTokenSigningAlgValuesSupported\",\n    },\n    id_token_encryption_alg_values_supported: {\n        toKey: \"idTokenEncryptionAlgValuesSupported\",\n    },\n    id_token_encryption_enc_values_supported: {\n        toKey: \"idTokenEncryptionEncValuesSupported\",\n    },\n    userinfo_signing_alg_values_supported: {\n        toKey: \"userinfoSigningAlgValuesSupported\",\n    },\n    userinfo_encryption_alg_values_supported: {\n        toKey: \"userinfoEncryptionAlgValuesSupported\",\n    },\n    userinfo_encryption_enc_values_supported: {\n        toKey: \"userinfoEncryptionEncValuesSupported\",\n    },\n    request_object_signing_alg_values_supported: {\n        toKey: \"requestObjectSigningAlgValuesSupported\",\n    },\n    request_object_encryption_alg_values_supported: {\n        toKey: \"requestObjectEncryptionAlgValuesSupported\",\n    },\n    request_object_encryption_enc_values_supported: {\n        toKey: \"requestObjectEncryptionEncValuesSupported\",\n    },\n    token_endpoint_auth_methods_supported: {\n        toKey: \"tokenEndpointAuthMethodsSupported\",\n    },\n    token_endpoint_auth_signing_alg_values_supported: {\n        toKey: \"tokenEndpointAuthSigningAlgValuesSupported\",\n    },\n    display_values_supported: { toKey: \"displayValuesSupported\" },\n    claim_types_supported: { toKey: \"claimTypesSupported\" },\n    claims_supported: { toKey: \"claimsSupported\" },\n    service_documentation: { toKey: \"serviceDocumentation\" },\n    claims_locales_supported: { toKey: \"claimsLocalesSupported\" },\n    ui_locales_supported: { toKey: \"uiLocalesSupported\" },\n    claims_parameter_supported: { toKey: \"claimsParameterSupported\" },\n    request_parameter_supported: { toKey: \"requestParameterSupported\" },\n    request_uri_parameter_supported: { toKey: \"requestUriParameterSupported\" },\n    require_request_uri_registration: { toKey: \"requireRequestUriRegistration\" },\n    op_policy_uri: {\n        toKey: \"opPolicyUri\",\n        convertToUrl: true,\n    },\n    op_tos_uri: {\n        toKey: \"opTosUri\",\n        convertToUrl: true,\n    },\n    solid_oidc_supported: {\n        toKey: \"solidOidcSupported\",\n    },\n};\nfunction processConfig(config) {\n    const parsedConfig = {};\n    Object.keys(config).forEach((key) => {\n        if (issuerConfigKeyMap[key]) {\n            parsedConfig[issuerConfigKeyMap[key].toKey] = config[key];\n        }\n    });\n    return parsedConfig;\n}\nclass IssuerConfigFetcher {\n    constructor(storageUtility) {\n        this.storageUtility = storageUtility;\n    }\n    static getLocalStorageKey(issuer) {\n        return `issuerConfig:${issuer}`;\n    }\n    async fetchConfig(issuer) {\n        let issuerConfig;\n        const openIdConfigUrl = urlPath_1.appendToUrlPathname(issuer, exports.WELL_KNOWN_OPENID_CONFIG);\n        const issuerConfigRequestBody = await window.fetch(openIdConfigUrl);\n        try {\n            issuerConfig = processConfig(await issuerConfigRequestBody.json());\n        }\n        catch (err) {\n            throw new solid_client_authn_core_1.ConfigurationError(`[${issuer.toString()}] has an invalid configuration: ${err.message}`);\n        }\n        await this.storageUtility.set(IssuerConfigFetcher.getLocalStorageKey(issuer), JSON.stringify(issuerConfig));\n        return issuerConfig;\n    }\n}\nexports.default = IssuerConfigFetcher;\n//# sourceMappingURL=IssuerConfigFetcher.js.map"]},"metadata":{},"sourceType":"script"}