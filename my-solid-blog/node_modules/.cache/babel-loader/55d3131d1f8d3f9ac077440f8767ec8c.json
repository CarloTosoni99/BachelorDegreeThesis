{"ast":null,"code":"import { createSolidDataset, getSolidDataset, saveSolidDatasetAt, createThing, getThing, addStringNoLocale, getSourceUrl, setThing } from \"@inrupt/solid-client\";\nimport { solid, rdf, schema } from 'rdf-namespaces';\nexport async function getOrCreateDataset(containerUri, fetch, publicTypeIndexUri) {\n  const publicTypeIndex = await getSolidDataset(publicTypeIndexUri);\n  console.log(\"Questo sempre stampato\");\n\n  if (publicTypeIndex === null) {\n    console.log(\"indice pubblico non caricato errore\");\n  }\n\n  const articleListThing = getThing(publicTypeIndex, \"articlelist\");\n\n  if (articleListThing === null) {\n    const articlelistUri = containerUri + \"articlelist.ttl\";\n    return await nitialiseArticlelist(articlelistUri, publicTypeIndex);\n  }\n\n  const articlelistUri = getUrl(publicTypeIndex, solid.instance);\n  return await getSolidDataset(articlelistUri);\n  /*\n  try {\n    const articlelistDataset = await getSolidDataset(\n      articlelistUri,\n      {\n      fetch: fetch,\n      },\n    );\n    return articlelistDataset;\n  } catch(e) {\n    if(e.statusCode === 404) {\n      const articlelistDataset = await saveSolidDatasetAt(\n        articlelistUri,\n        createSolidDataset(),\n        {\n        fetch: fetch,\n        },\n      );\n      return articlelistDataset\n    }\n  }\n  return;\n  */\n}\n\nasync function initialiseArticlelist(articlelistUri, publicTypeIndex) {\n  const articlelistDataset = await saveSolidDatasetAt(articlelistUri, createSolidDataset(), {\n    fetch: fetch\n  });\n  const newPublicThing = createThing({\n    url: \"articlelistUrl\"\n  });\n  const thingWithType = addStringNoLocale(newPublicThing, rdf.type, solid.TypeRegistration);\n  const thingWithForClass = addStringNoLocale(thingWithType, solid.forClass, schema.TextDigitalDocument);\n  const thingWithInstance = addStringNoLocale(thingWithForClass, solid.instance, getSourceUrl(articlelistDataset));\n  const uploadedPublicTypeIndex = setThing(publicTypeIndex, thingWithInstance);\n  const savedPublicTypeIndex = saveSolidDatasetAt();\n  return articlelistDataset;\n}","map":{"version":3,"sources":["/home/carlo/Desktop/Project/my-solid-blog/src/utils/GetOrCreateDataset.js"],"names":["createSolidDataset","getSolidDataset","saveSolidDatasetAt","createThing","getThing","addStringNoLocale","getSourceUrl","setThing","solid","rdf","schema","getOrCreateDataset","containerUri","fetch","publicTypeIndexUri","publicTypeIndex","console","log","articleListThing","articlelistUri","nitialiseArticlelist","getUrl","instance","initialiseArticlelist","articlelistDataset","newPublicThing","url","thingWithType","type","TypeRegistration","thingWithForClass","forClass","TextDigitalDocument","thingWithInstance","uploadedPublicTypeIndex","savedPublicTypeIndex"],"mappings":"AAAA,SACEA,kBADF,EAEEC,eAFF,EAGEC,kBAHF,EAIEC,WAJF,EAKEC,QALF,EAMEC,iBANF,EAOEC,YAPF,EAQEC,QARF,QASO,sBATP;AAWA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,MAArB,QAAmC,gBAAnC;AAGA,OAAO,eAAeC,kBAAf,CAAkCC,YAAlC,EAAgDC,KAAhD,EAAuDC,kBAAvD,EAA2E;AAEhF,QAAMC,eAAe,GAAG,MAAMd,eAAe,CAACa,kBAAD,CAA7C;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AACA,MAAKF,eAAe,KAAK,IAAzB,EAAgC;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACD;;AAED,QAAMC,gBAAgB,GAAGd,QAAQ,CAACW,eAAD,EAAkB,aAAlB,CAAjC;;AAEA,MAAKG,gBAAgB,KAAK,IAA1B,EAAiC;AAC/B,UAAMC,cAAc,GAAGP,YAAY,GAAG,iBAAtC;AACA,WAAO,MAAMQ,oBAAoB,CAACD,cAAD,EAAiBJ,eAAjB,CAAjC;AACD;;AAED,QAAMI,cAAc,GAAGE,MAAM,CAACN,eAAD,EAAkBP,KAAK,CAACc,QAAxB,CAA7B;AACA,SAAO,MAAMrB,eAAe,CAACkB,cAAD,CAA5B;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;;AAED,eAAeI,qBAAf,CAAsCJ,cAAtC,EAAsDJ,eAAtD,EAAuE;AACrE,QAAMS,kBAAkB,GAAG,MAAMtB,kBAAkB,CACjDiB,cADiD,EAEjDnB,kBAAkB,EAF+B,EAGjD;AACAa,IAAAA,KAAK,EAAEA;AADP,GAHiD,CAAnD;AAQA,QAAMY,cAAc,GAAGtB,WAAW,CAAC;AAACuB,IAAAA,GAAG,EAAE;AAAN,GAAD,CAAlC;AAEA,QAAMC,aAAa,GAAGtB,iBAAiB,CACrCoB,cADqC,EAErChB,GAAG,CAACmB,IAFiC,EAGrCpB,KAAK,CAACqB,gBAH+B,CAAvC;AAMA,QAAMC,iBAAiB,GAAGzB,iBAAiB,CACzCsB,aADyC,EAEzCnB,KAAK,CAACuB,QAFmC,EAGzCrB,MAAM,CAACsB,mBAHkC,CAA3C;AAMA,QAAMC,iBAAiB,GAAG5B,iBAAiB,CACzCyB,iBADyC,EAEzCtB,KAAK,CAACc,QAFmC,EAGzChB,YAAY,CAACkB,kBAAD,CAH6B,CAA3C;AAMA,QAAMU,uBAAuB,GAAG3B,QAAQ,CACtCQ,eADsC,EAEtCkB,iBAFsC,CAAxC;AAKA,QAAME,oBAAoB,GAAGjC,kBAAkB,EAA/C;AAIA,SAAOsB,kBAAP;AACD","sourcesContent":["import {\n  createSolidDataset,\n  getSolidDataset,\n  saveSolidDatasetAt,\n  createThing,\n  getThing,\n  addStringNoLocale,\n  getSourceUrl,\n  setThing,\n} from \"@inrupt/solid-client\";\n\nimport { solid, rdf, schema } from 'rdf-namespaces';\n\n\nexport async function getOrCreateDataset(containerUri, fetch, publicTypeIndexUri) {\n\n  const publicTypeIndex = await getSolidDataset(publicTypeIndexUri);\n\n  console.log(\"Questo sempre stampato\");\n  if ( publicTypeIndex === null ) {\n    console.log(\"indice pubblico non caricato errore\");\n  }\n\n  const articleListThing = getThing(publicTypeIndex, \"articlelist\");\n\n  if ( articleListThing === null ) {\n    const articlelistUri = containerUri + \"articlelist.ttl\";\n    return await nitialiseArticlelist(articlelistUri, publicTypeIndex);\n  }\n\n  const articlelistUri = getUrl(publicTypeIndex, solid.instance);\n  return await getSolidDataset(articlelistUri);\n\n  \n  /*\n  try {\n    const articlelistDataset = await getSolidDataset(\n      articlelistUri,\n      {\n      fetch: fetch,\n      },\n    );\n    return articlelistDataset;\n  } catch(e) {\n    if(e.statusCode === 404) {\n      const articlelistDataset = await saveSolidDatasetAt(\n        articlelistUri,\n        createSolidDataset(),\n        {\n        fetch: fetch,\n        },\n      );\n      return articlelistDataset\n    }\n  }\n  return;\n  */\n}\n\nasync function initialiseArticlelist (articlelistUri, publicTypeIndex) {\n  const articlelistDataset = await saveSolidDatasetAt(\n    articlelistUri,\n    createSolidDataset(),\n    {\n    fetch: fetch,\n    },\n  );\n\n  const newPublicThing = createThing({url: \"articlelistUrl\"});\n\n  const thingWithType = addStringNoLocale(\n    newPublicThing,\n    rdf.type,\n    solid.TypeRegistration,\n  );\n\n  const thingWithForClass = addStringNoLocale(\n    thingWithType,\n    solid.forClass,\n    schema.TextDigitalDocument\n  );\n\n  const thingWithInstance = addStringNoLocale(\n    thingWithForClass,\n    solid.instance,\n    getSourceUrl(articlelistDataset),\n  );\n\n  const uploadedPublicTypeIndex = setThing(\n    publicTypeIndex,\n    thingWithInstance,\n  );\n\n  const savedPublicTypeIndex = saveSolidDatasetAt(\n    \n  );\n\n  return articlelistDataset;\n}"]},"metadata":{},"sourceType":"module"}