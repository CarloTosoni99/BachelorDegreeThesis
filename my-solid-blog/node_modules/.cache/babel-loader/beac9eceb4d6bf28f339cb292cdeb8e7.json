{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst oidc_client_ext_1 = require(\"@inrupt/oidc-client-ext\");\n\nclass AuthorizationCodeWithPkceOidcHandler {\n  constructor(storageUtility, redirector) {\n    this.storageUtility = storageUtility;\n    this.redirector = redirector;\n  }\n\n  async canHandle(oidcLoginOptions) {\n    return !!(oidcLoginOptions.issuerConfiguration.grantTypesSupported && oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf(\"authorization_code\") > -1);\n  }\n\n  async handle(oidcLoginOptions) {\n    const oidcOptions = {\n      authority: oidcLoginOptions.issuer.toString(),\n      client_id: oidcLoginOptions.client.clientId,\n      client_secret: oidcLoginOptions.client.clientSecret,\n      redirect_uri: oidcLoginOptions.redirectUrl.toString(),\n      post_logout_redirect_uri: oidcLoginOptions.redirectUrl.toString(),\n      response_type: \"code\",\n      scope: \"openid webid\",\n      filterProtocolClaims: true,\n      loadUserInfo: false,\n      code_verifier: true,\n      prompt: oidcLoginOptions.prompt\n    };\n    const oidcClientLibrary = new oidc_client_ext_1.OidcClient(oidcOptions);\n    const {\n      redirector\n    } = this;\n    const storage = this.storageUtility;\n\n    try {\n      const signingRequest = await oidcClientLibrary.createSigninRequest();\n      await Promise.all([storage.setForUser(signingRequest.state._id, {\n        sessionId: oidcLoginOptions.sessionId\n      }), storage.setForUser(oidcLoginOptions.sessionId, {\n        codeVerifier: signingRequest.state._code_verifier,\n        issuer: oidcLoginOptions.issuer.toString(),\n        redirectUrl: oidcLoginOptions.redirectUrl,\n        dpop: oidcLoginOptions.dpop ? \"true\" : \"false\"\n      })]);\n      redirector.redirect(signingRequest.url.toString(), {\n        handleRedirect: oidcLoginOptions.handleRedirect,\n        redirectInIframe: oidcLoginOptions.inIframe\n      });\n    } catch (err) {\n      console.error(err);\n    }\n\n    return undefined;\n  }\n\n}\n\nexports.default = AuthorizationCodeWithPkceOidcHandler;","map":{"version":3,"sources":["../../../../src/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.ts"],"names":[],"mappings":";;;;;;AAoCA,MAAA,iBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAOA,MAAqB,oCAArB,CAAyD;AAGvD,EAAA,WAAA,CACU,cADV,EAEU,UAFV,EAEiC;AADvB,SAAA,cAAA,GAAA,cAAA;AACA,SAAA,UAAA,GAAA,UAAA;AACN;;AAEW,QAAT,SAAS,CAAC,gBAAD,EAA+B;AAC5C,WAAO,CAAC,EACN,gBAAgB,CAAC,mBAAjB,CAAqC,mBAArC,IACA,gBAAgB,CAAC,mBAAjB,CAAqC,mBAArC,CAAyD,OAAzD,CACE,oBADF,IAEI,CAAC,CAJC,CAAR;AAMD;;AAEW,QAAN,MAAM,CAAC,gBAAD,EAA+B;AAEzC,UAAM,WAAW,GAAG;AAClB,MAAA,SAAS,EAAE,gBAAgB,CAAC,MAAjB,CAAwB,QAAxB,EADO;AAElB,MAAA,SAAS,EAAE,gBAAgB,CAAC,MAAjB,CAAwB,QAFjB;AAGlB,MAAA,aAAa,EAAE,gBAAgB,CAAC,MAAjB,CAAwB,YAHrB;AAIlB,MAAA,YAAY,EAAE,gBAAgB,CAAC,WAAjB,CAA6B,QAA7B,EAJI;AAKlB,MAAA,wBAAwB,EAAE,gBAAgB,CAAC,WAAjB,CAA6B,QAA7B,EALR;AAMlB,MAAA,aAAa,EAAE,MANG;AAWlB,MAAA,KAAK,EAAE,cAXW;AAYlB,MAAA,oBAAoB,EAAE,IAZJ;AAgBlB,MAAA,YAAY,EAAE,KAhBI;AAiBlB,MAAA,aAAa,EAAE,IAjBG;AAkBlB,MAAA,MAAM,EAAE,gBAAgB,CAAC;AAlBP,KAApB;AAsBA,UAAM,iBAAiB,GAAG,IAAI,iBAAA,CAAA,UAAJ,CAAe,WAAf,CAA1B;AAEA,UAAM;AAAE,MAAA;AAAF,QAAiB,IAAvB;AACA,UAAM,OAAO,GAAG,KAAK,cAArB;;AAEA,QAAI;AACF,YAAM,cAAc,GAAG,MAAM,iBAAiB,CAAC,mBAAlB,EAA7B;AACA,YAAM,OAAO,CAAC,GAAR,CAAY,CAWhB,OAAO,CAAC,UAAR,CAAmB,cAAc,CAAC,KAAf,CAAqB,GAAxC,EAA6C;AAC3C,QAAA,SAAS,EAAE,gBAAgB,CAAC;AADe,OAA7C,CAXgB,EAmBhB,OAAO,CAAC,UAAR,CAAmB,gBAAgB,CAAC,SAApC,EAA+C;AAE7C,QAAA,YAAY,EAAE,cAAc,CAAC,KAAf,CAAqB,cAFU;AAG7C,QAAA,MAAM,EAAE,gBAAgB,CAAC,MAAjB,CAAwB,QAAxB,EAHqC;AAK7C,QAAA,WAAW,EAAE,gBAAgB,CAAC,WALe;AAM7C,QAAA,IAAI,EAAE,gBAAgB,CAAC,IAAjB,GAAwB,MAAxB,GAAiC;AANM,OAA/C,CAnBgB,CAAZ,CAAN;AA6BA,MAAA,UAAU,CAAC,QAAX,CAAoB,cAAc,CAAC,GAAf,CAAmB,QAAnB,EAApB,EAAmD;AACjD,QAAA,cAAc,EAAE,gBAAgB,CAAC,cADgB;AAEjD,QAAA,gBAAgB,EAAE,gBAAgB,CAAC;AAFc,OAAnD;AAID,KAnCD,CAmCE,OAAO,GAAP,EAAqB;AAErB,MAAA,OAAO,CAAC,KAAR,CAAc,GAAd;AACD;;AAGD,WAAO,SAAP;AACD;;AAxFsD;;AAAzD,OAAA,CAAA,OAAA,GAAA,oCAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst oidc_client_ext_1 = require(\"@inrupt/oidc-client-ext\");\nclass AuthorizationCodeWithPkceOidcHandler {\n    constructor(storageUtility, redirector) {\n        this.storageUtility = storageUtility;\n        this.redirector = redirector;\n    }\n    async canHandle(oidcLoginOptions) {\n        return !!(oidcLoginOptions.issuerConfiguration.grantTypesSupported &&\n            oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf(\"authorization_code\") > -1);\n    }\n    async handle(oidcLoginOptions) {\n        const oidcOptions = {\n            authority: oidcLoginOptions.issuer.toString(),\n            client_id: oidcLoginOptions.client.clientId,\n            client_secret: oidcLoginOptions.client.clientSecret,\n            redirect_uri: oidcLoginOptions.redirectUrl.toString(),\n            post_logout_redirect_uri: oidcLoginOptions.redirectUrl.toString(),\n            response_type: \"code\",\n            scope: \"openid webid\",\n            filterProtocolClaims: true,\n            loadUserInfo: false,\n            code_verifier: true,\n            prompt: oidcLoginOptions.prompt,\n        };\n        const oidcClientLibrary = new oidc_client_ext_1.OidcClient(oidcOptions);\n        const { redirector } = this;\n        const storage = this.storageUtility;\n        try {\n            const signingRequest = await oidcClientLibrary.createSigninRequest();\n            await Promise.all([\n                storage.setForUser(signingRequest.state._id, {\n                    sessionId: oidcLoginOptions.sessionId,\n                }),\n                storage.setForUser(oidcLoginOptions.sessionId, {\n                    codeVerifier: signingRequest.state._code_verifier,\n                    issuer: oidcLoginOptions.issuer.toString(),\n                    redirectUrl: oidcLoginOptions.redirectUrl,\n                    dpop: oidcLoginOptions.dpop ? \"true\" : \"false\",\n                }),\n            ]);\n            redirector.redirect(signingRequest.url.toString(), {\n                handleRedirect: oidcLoginOptions.handleRedirect,\n                redirectInIframe: oidcLoginOptions.inIframe,\n            });\n        }\n        catch (err) {\n            console.error(err);\n        }\n        return undefined;\n    }\n}\nexports.default = AuthorizationCodeWithPkceOidcHandler;\n//# sourceMappingURL=AuthorizationCodeWithPkceOidcHandler.js.map"]},"metadata":{},"sourceType":"script"}