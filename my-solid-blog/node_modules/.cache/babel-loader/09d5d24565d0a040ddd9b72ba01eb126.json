{"ast":null,"code":"/**\r\n *\r\n *\r\n * True if the subject and object are the same RDF node (symbol or literal).\r\n * Do not confuse with owl:sameAs.\r\n * A cwm built-in logical operator, RDF graph level.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#equalTo\r\n */\nvar equalTo = 'http://www.w3.org/2000/10/swap/log#equalTo';\n/**\r\n *\r\n *\r\n * Equality in this sense is actually the same URI.\r\n * A cwm built-in logical operator.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#notEqualTo\r\n */\n\nvar notEqualTo = 'http://www.w3.org/2000/10/swap/log#notEqualTo';\n/**\r\n *\r\n *\r\n *\r\n * This is a low-level language type, one of log:Formula, log:Literal,\r\n * log:List, log:Set or log:Other.\r\n * Example: log:semanticsOrError returns either a formula or a string,\r\n * and you can check which using log:rawType.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#rawType\r\n */\n\nvar rawType = 'http://www.w3.org/2000/10/swap/log#rawType';\n/**\r\n *\r\n *\r\n * Logical implication.\r\n * This is the relation between the antecedent (subject) and\r\n * conclusion (object) of a rule.\r\n * The application of a rule to a knowledge-base is as follows.\r\n * For every substitution which, applied to the antecedent,\r\n * gives a formula which is a subset of the knowledge-base,\r\n * then the result of applying that same substitution to the\r\n * conclusion may be added to the knowledge-base.\r\n *\r\n * related: See log:conclusion.\r\n * (See the CWM manual for command line options to determine how\r\n * rules from different sources are applied to and the results\r\n * added to various formula.)\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#implies\r\n */\n\nvar implies = 'http://www.w3.org/2000/10/swap/log#implies';\n/**\r\n *\r\n *\r\n * The subject formula includes the object formula.\r\n * Formula A includes formula B if there exists some substitution\r\n * which when applied to B creates a formula B' such that for\r\n * every statement in B' is also in A, every variable\r\n * universally (or existentially) quantified in B' is quantified in\r\n * the same way in A.\r\n *\r\n * Variable substitution is applied recursively to nested compound terms such as\r\n * formulae, lists and sets.\r\n *\r\n * (Understood natively by cwm when in in the antecedent of a rule.\r\n * You can use this to peer inside nested formulae.)\r\n *\r\n * http://www.w3.org/2000/10/swap/log#includes\r\n */\n\nvar includes = 'http://www.w3.org/2000/10/swap/log#includes';\n/**\r\n *\r\n *\r\n * The object formula is NOT a subset of subject.\r\n *     True iff log:includes is false.\r\n *     The converse of log:includes. (Understood natively by cwm.\r\n *     The subject formula may contain variables.\r\n *     (In cwm, variables must of course end up getting bound\r\n *     before the log:include test can be done, or an infinite result set\r\n *     would result)\r\n *     Related: See includes\r\n *\r\n * http://www.w3.org/2000/10/swap/log#notIncludes\r\n */\n\nvar notIncludes = 'http://www.w3.org/2000/10/swap/log#notIncludes';\n/**\r\n * parses to\r\n *\r\n * The subject string, parsed as N3, gives this formula.\r\n *\r\n * http://www.w3.org/2000/10/swap/log#parsedAsN3\r\n */\n\nvar parsedAsN3 = 'http://www.w3.org/2000/10/swap/log#parsedAsN3';\n/**\r\n * n3 string\r\n *\r\n * The subject formula, expressed as N3, gives this string.\r\n *\r\n * http://www.w3.org/2000/10/swap/log#n3String\r\n */\n\nvar n3String = 'http://www.w3.org/2000/10/swap/log#n3String';\n/**\r\n * semantics\r\n *\r\n * The log:semantics of a document is the formula.\r\n * achieved by parsing representation of the document.\r\n *  For a document in Notation3, log:semantics is the\r\n * log:parsedAsN3 of the log:contents of the document.\r\n * For a document in RDF/XML, it is parsed according to the\r\n * RDF/XML specification to yield an RDF formula\r\n * (a subclass of N3 log:Formula).\r\n *\r\n * [Aside: Philosophers will be distracted here into worrying about the meaning\r\n * of meaning. At least we didn't call this function \"meaning\"!\r\n * In as much as N3 is used as an interlingua for interoperability\r\n * for different systems, this for an N3 based system is the meaning\r\n * expressed by a document.]\r\n *\r\n * (Cwm knows how to go get a document and parse N3 and RDF/XML\r\n * it in order to evaluate this.\r\n * Other languages for web documents\r\n * may be defined whose N3 semantics are therefore\r\n * also calculable, and so they could be added in due course.\r\n * See for example GRDDL, RDFa, etc)\r\n *\r\n * http://www.w3.org/2000/10/swap/log#semantics\r\n */\n\nvar semantics = 'http://www.w3.org/2000/10/swap/log#semantics';\n/**\r\n * semantics or error message\r\n *\r\n * This connects a document and either the formula it parses to,\r\n * or an error message explaining what went wrong with trying. See log:semantics.\r\n * (Cwm knows how to go get a document and parse it in order to evaluate this.)\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#semanticsOrError\r\n */\n\nvar semanticsOrError = 'http://www.w3.org/2000/10/swap/log#semanticsOrError';\n/**\r\n * content\r\n *\r\n * This connects a document and a string that represents it.\r\n * (Cwm knows how to go get a document in order to evaluate this.)\r\n * Note that the content-type of the information is not given and\r\n * so must be known or guessed.\r\n *\r\n * http://www.w3.org/2000/10/swap/log#content\r\n */\n\nvar content = 'http://www.w3.org/2000/10/swap/log#content';\n/**\r\n * conjunction\r\n *\r\n * \"A function to merge formulae: logical AND.\r\n *\r\n * The subject is a list of formulae.\r\n * The object, which can be generated, is a formula containing a copy\r\n * of each of the formulae in the list on the left.\r\n * A cwm built-in function.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#conjunction\r\n */\n\nvar conjunction = 'http://www.w3.org/2000/10/swap/log#conjunction';\n/**\r\n * conclusion\r\n *\r\n * All possible conclusions which can be drawn from a formula.\r\n *\r\n * The object of this function, a formula, is the set of conclusions which can be\r\n * drawn from the subject formula, by successively applying any\r\n * rules it contains to the data it contains. This is equivalent to\r\n * cwm's \"--think\" command line function.  It does use built-ins, so\r\n * it may for example indirectly invoke other documents, validate\r\n * signatures, etc.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#conclusion\r\n */\n\nvar conclusion = 'http://www.w3.org/2000/10/swap/log#conclusion';\n/**\r\n * definitive document\r\n *\r\n * \tWhen document D is the definitiveDocument for property P,\r\n * any statement X P Y is true iff and only if the semantics of document D\r\n * include that statement.\r\n *\r\n * For example, there may be a definitive document for the zipcode of\r\n * airports by airport code, and so on. This is useful to let a reasoner\r\n * know that it can extend its query to the given document.\r\n * (Cwm will do this if its mode includes \"r\").\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#definitiveDocument\r\n */\n\nvar definitiveDocument = 'http://www.w3.org/2000/10/swap/log#definitiveDocument';\n/**\r\n * definitive service\r\n *\r\n * \tWhen service S is the definitiveService for property P,\r\n * any statement X P Y is true iff and only if a query to S returns\r\n * that it is.  The protocol for the service S depends on the scheme.\r\n * For mysql protocol, the URI of the service is like\r\n * sql://user:password@host.domain/database/.\r\n *\r\n * For example, there may be a definitive service for the zipcode of\r\n * airports by airport code, and so on. This is useful to let a reasoner\r\n * know that it can help resolve a query by delegating it to the service\r\n * in question.\r\n * (Cwm will do this if its mode includes \"r\").\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#definitiveService\r\n */\n\nvar definitiveService = 'http://www.w3.org/2000/10/swap/log#definitiveService';\n/**\r\n * output string\r\n *\r\n * The subject is a key and the object is a string,\r\n * where the strings are to be output in the order of the keys.\r\n * See cwm --strings in cwm --help.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#outputString\r\n */\n\nvar outputString = 'http://www.w3.org/2000/10/swap/log#outputString';\n/**\r\n *\r\n *\r\n * This allows one to look at the actual string of the URI which identifies this.\r\n *\r\n * (Cwm can get the URI of a resource or get the resource from the URI.)\r\n * This is a level breaker, breaking the rule of not looking inside a\r\n * URI.   Use (eg with  string:match) to replace RDF's old \"aboutEach\"\r\n * functionality. Use to implement the URI spec and protocol specs, etc.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#uri\r\n */\n\nvar uri = 'http://www.w3.org/2000/10/swap/log#uri';\n/**\r\n *\r\n *\r\n * This allows one to look at the actual string of the URI which identifies this,\r\n * for anything, even a blank node or a formula. This peeks into the internal\r\n * workings of cwm, and so is not normally used. Use log:uri instead.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#rawUri\r\n */\n\nvar rawUri = 'http://www.w3.org/2000/10/swap/log#rawUri';\n/**\r\n *\r\n *\r\n * For anything identified by a URI with a fragid, this is the\r\n * thing identified by the same URI without a hash or fragid.\r\n * For anything else, it is itself.\r\n *\r\n * http://www.w3.org/2000/10/swap/log#racine\r\n */\n\nvar racine = 'http://www.w3.org/2000/10/swap/log#racine';\n/**\r\n *\r\n *\r\n * Takes a list of a string and a URI and creates a datatyped\r\n *      literal. For example, { (\"2005-03-30T11:00:00\" :tz) log:dtlit ?X } => { ?X a :Answer } .\r\n *     will produce \"2005-03-30T11:00:00\"^^:tz a :Answer .\r\n *\r\n * http://www.w3.org/2000/10/swap/log#dtlit\r\n */\n\nvar dtlit = 'http://www.w3.org/2000/10/swap/log#dtlit';\n/**\r\n *\r\n *\r\n * A document which, which parsed as Notation3\r\n * as defined in general by http://www.w3.org/DesignIssues/Notation3.html\r\n * and this schema, conveys the intent of the author by the semantics defined\r\n * on those specifications, and the semantics defined by the specifications\r\n * of any other identifiers used in the document.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#N3Document\r\n */\n\nvar N3Document = 'http://www.w3.org/2000/10/swap/log#N3Document';\n/**\r\n *\r\n *\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#Formula\r\n */\n\nvar Formula = 'http://www.w3.org/2000/10/swap/log#Formula';\n/**\r\n *\r\n *\r\n * null\r\n * Note that `String` is a reserved Javascript keyword, and is therefore suffixed by `__workaround`.\r\n * For a list of reserved keywords, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords.\r\n *\r\n * http://www.w3.org/2000/10/swap/log#String\r\n */\n\nvar String__workaround = 'http://www.w3.org/2000/10/swap/log#String';\n/**\r\n *\r\n *\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#List\r\n */\n\nvar List = 'http://www.w3.org/2000/10/swap/log#List';\n/**\r\n *\r\n *\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#Other\r\n */\n\nvar Other = 'http://www.w3.org/2000/10/swap/log#Other';\n/**\r\n *\r\n *\r\n * Something which is true: believe it as you would believe this.\r\n *\r\n * \tUnderstood natively by cwm in that it will execute rules in a formula\r\n * \tdeclared a Truth within a formula it is already taking rules from.\r\n *\r\n * http://www.w3.org/2000/10/swap/log#Truth\r\n */\n\nvar Truth = 'http://www.w3.org/2000/10/swap/log#Truth';\n/**\r\n *\r\n *\r\n * Any statement mentioning anything in this class\r\n * is considered boring and purged by the cwm --purge option.\r\n * This is a convenience, and does not have any value when published as a\r\n * general fact on the web.\r\n *\r\n * http://www.w3.org/2000/10/swap/log#Chaff\r\n */\n\nvar Chaff = 'http://www.w3.org/2000/10/swap/log#Chaff';\nvar logImport = /*#__PURE__*/Object.freeze({\n  equalTo: equalTo,\n  notEqualTo: notEqualTo,\n  rawType: rawType,\n  implies: implies,\n  includes: includes,\n  notIncludes: notIncludes,\n  parsedAsN3: parsedAsN3,\n  n3String: n3String,\n  semantics: semantics,\n  semanticsOrError: semanticsOrError,\n  content: content,\n  conjunction: conjunction,\n  conclusion: conclusion,\n  definitiveDocument: definitiveDocument,\n  definitiveService: definitiveService,\n  outputString: outputString,\n  uri: uri,\n  rawUri: rawUri,\n  racine: racine,\n  dtlit: dtlit,\n  N3Document: N3Document,\n  Formula: Formula,\n  String__workaround: String__workaround,\n  List: List,\n  Other: Other,\n  Truth: Truth,\n  Chaff: Chaff\n});\nexport { Chaff as C, Formula as F, List as L, N3Document as N, Other as O, String__workaround as S, Truth as T, includes as a, notIncludes as b, n3String as c, semanticsOrError as d, equalTo as e, content as f, conjunction as g, conclusion as h, implies as i, definitiveDocument as j, definitiveService as k, rawUri as l, racine as m, notEqualTo as n, outputString as o, parsedAsN3 as p, dtlit as q, rawType as r, semantics as s, logImport as t, uri as u };","map":{"version":3,"sources":["/home/carlo/Desktop/Thesis/my-solid-blog/node_modules/rdf-namespaces/dist/log-c975ddd5.js"],"names":["equalTo","notEqualTo","rawType","implies","includes","notIncludes","parsedAsN3","n3String","semantics","semanticsOrError","content","conjunction","conclusion","definitiveDocument","definitiveService","outputString","uri","rawUri","racine","dtlit","N3Document","Formula","String__workaround","List","Other","Truth","Chaff","logImport","Object","freeze","C","F","L","N","O","S","T","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,OAAO,GAAG,4CAAd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU,GAAG,+CAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,OAAO,GAAG,4CAAd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,OAAO,GAAG,4CAAd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,QAAQ,GAAG,6CAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,WAAW,GAAG,gDAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU,GAAG,+CAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,QAAQ,GAAG,6CAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS,GAAG,8CAAhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,gBAAgB,GAAG,qDAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,OAAO,GAAG,4CAAd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,WAAW,GAAG,gDAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU,GAAG,+CAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,kBAAkB,GAAG,uDAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,iBAAiB,GAAG,sDAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,YAAY,GAAG,iDAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,GAAG,GAAG,wCAAV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,MAAM,GAAG,2CAAb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,MAAM,GAAG,2CAAb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,KAAK,GAAG,0CAAZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU,GAAG,+CAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,OAAO,GAAG,4CAAd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,kBAAkB,GAAG,2CAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,IAAI,GAAG,yCAAX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,KAAK,GAAG,0CAAZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,KAAK,GAAG,0CAAZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,KAAK,GAAG,0CAAZ;AAEA,IAAIC,SAAS,GAAG,aAAaC,MAAM,CAACC,MAAP,CAAc;AAC1C7B,EAAAA,OAAO,EAAEA,OADiC;AAE1CC,EAAAA,UAAU,EAAEA,UAF8B;AAG1CC,EAAAA,OAAO,EAAEA,OAHiC;AAI1CC,EAAAA,OAAO,EAAEA,OAJiC;AAK1CC,EAAAA,QAAQ,EAAEA,QALgC;AAM1CC,EAAAA,WAAW,EAAEA,WAN6B;AAO1CC,EAAAA,UAAU,EAAEA,UAP8B;AAQ1CC,EAAAA,QAAQ,EAAEA,QARgC;AAS1CC,EAAAA,SAAS,EAAEA,SAT+B;AAU1CC,EAAAA,gBAAgB,EAAEA,gBAVwB;AAW1CC,EAAAA,OAAO,EAAEA,OAXiC;AAY1CC,EAAAA,WAAW,EAAEA,WAZ6B;AAa1CC,EAAAA,UAAU,EAAEA,UAb8B;AAc1CC,EAAAA,kBAAkB,EAAEA,kBAdsB;AAe1CC,EAAAA,iBAAiB,EAAEA,iBAfuB;AAgB1CC,EAAAA,YAAY,EAAEA,YAhB4B;AAiB1CC,EAAAA,GAAG,EAAEA,GAjBqC;AAkB1CC,EAAAA,MAAM,EAAEA,MAlBkC;AAmB1CC,EAAAA,MAAM,EAAEA,MAnBkC;AAoB1CC,EAAAA,KAAK,EAAEA,KApBmC;AAqB1CC,EAAAA,UAAU,EAAEA,UArB8B;AAsB1CC,EAAAA,OAAO,EAAEA,OAtBiC;AAuB1CC,EAAAA,kBAAkB,EAAEA,kBAvBsB;AAwB1CC,EAAAA,IAAI,EAAEA,IAxBoC;AAyB1CC,EAAAA,KAAK,EAAEA,KAzBmC;AA0B1CC,EAAAA,KAAK,EAAEA,KA1BmC;AA2B1CC,EAAAA,KAAK,EAAEA;AA3BmC,CAAd,CAA7B;AA8BA,SAASA,KAAK,IAAII,CAAlB,EAAqBT,OAAO,IAAIU,CAAhC,EAAmCR,IAAI,IAAIS,CAA3C,EAA8CZ,UAAU,IAAIa,CAA5D,EAA+DT,KAAK,IAAIU,CAAxE,EAA2EZ,kBAAkB,IAAIa,CAAjG,EAAoGV,KAAK,IAAIW,CAA7G,EAAgHhC,QAAQ,IAAIiC,CAA5H,EAA+HhC,WAAW,IAAIiC,CAA9I,EAAiJ/B,QAAQ,IAAIgC,CAA7J,EAAgK9B,gBAAgB,IAAI+B,CAApL,EAAuLxC,OAAO,IAAIyC,CAAlM,EAAqM/B,OAAO,IAAIgC,CAAhN,EAAmN/B,WAAW,IAAIgC,CAAlO,EAAqO/B,UAAU,IAAIgC,CAAnP,EAAsPzC,OAAO,IAAI0C,CAAjQ,EAAoQhC,kBAAkB,IAAIiC,CAA1R,EAA6RhC,iBAAiB,IAAIiC,CAAlT,EAAqT9B,MAAM,IAAI+B,CAA/T,EAAkU9B,MAAM,IAAI+B,CAA5U,EAA+UhD,UAAU,IAAIiD,CAA7V,EAAgWnC,YAAY,IAAIoC,CAAhX,EAAmX7C,UAAU,IAAI8C,CAAjY,EAAoYjC,KAAK,IAAIkC,CAA7Y,EAAgZnD,OAAO,IAAIoD,CAA3Z,EAA8Z9C,SAAS,IAAI+C,CAA3a,EAA8a5B,SAAS,IAAI6B,CAA3b,EAA8bxC,GAAG,IAAIyC,CAArc","sourcesContent":["/**\r\n *\r\n *\r\n * True if the subject and object are the same RDF node (symbol or literal).\r\n * Do not confuse with owl:sameAs.\r\n * A cwm built-in logical operator, RDF graph level.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#equalTo\r\n */\r\nvar equalTo = 'http://www.w3.org/2000/10/swap/log#equalTo';\r\n/**\r\n *\r\n *\r\n * Equality in this sense is actually the same URI.\r\n * A cwm built-in logical operator.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#notEqualTo\r\n */\r\nvar notEqualTo = 'http://www.w3.org/2000/10/swap/log#notEqualTo';\r\n/**\r\n *\r\n *\r\n *\r\n * This is a low-level language type, one of log:Formula, log:Literal,\r\n * log:List, log:Set or log:Other.\r\n * Example: log:semanticsOrError returns either a formula or a string,\r\n * and you can check which using log:rawType.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#rawType\r\n */\r\nvar rawType = 'http://www.w3.org/2000/10/swap/log#rawType';\r\n/**\r\n *\r\n *\r\n * Logical implication.\r\n * This is the relation between the antecedent (subject) and\r\n * conclusion (object) of a rule.\r\n * The application of a rule to a knowledge-base is as follows.\r\n * For every substitution which, applied to the antecedent,\r\n * gives a formula which is a subset of the knowledge-base,\r\n * then the result of applying that same substitution to the\r\n * conclusion may be added to the knowledge-base.\r\n *\r\n * related: See log:conclusion.\r\n * (See the CWM manual for command line options to determine how\r\n * rules from different sources are applied to and the results\r\n * added to various formula.)\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#implies\r\n */\r\nvar implies = 'http://www.w3.org/2000/10/swap/log#implies';\r\n/**\r\n *\r\n *\r\n * The subject formula includes the object formula.\r\n * Formula A includes formula B if there exists some substitution\r\n * which when applied to B creates a formula B' such that for\r\n * every statement in B' is also in A, every variable\r\n * universally (or existentially) quantified in B' is quantified in\r\n * the same way in A.\r\n *\r\n * Variable substitution is applied recursively to nested compound terms such as\r\n * formulae, lists and sets.\r\n *\r\n * (Understood natively by cwm when in in the antecedent of a rule.\r\n * You can use this to peer inside nested formulae.)\r\n *\r\n * http://www.w3.org/2000/10/swap/log#includes\r\n */\r\nvar includes = 'http://www.w3.org/2000/10/swap/log#includes';\r\n/**\r\n *\r\n *\r\n * The object formula is NOT a subset of subject.\r\n *     True iff log:includes is false.\r\n *     The converse of log:includes. (Understood natively by cwm.\r\n *     The subject formula may contain variables.\r\n *     (In cwm, variables must of course end up getting bound\r\n *     before the log:include test can be done, or an infinite result set\r\n *     would result)\r\n *     Related: See includes\r\n *\r\n * http://www.w3.org/2000/10/swap/log#notIncludes\r\n */\r\nvar notIncludes = 'http://www.w3.org/2000/10/swap/log#notIncludes';\r\n/**\r\n * parses to\r\n *\r\n * The subject string, parsed as N3, gives this formula.\r\n *\r\n * http://www.w3.org/2000/10/swap/log#parsedAsN3\r\n */\r\nvar parsedAsN3 = 'http://www.w3.org/2000/10/swap/log#parsedAsN3';\r\n/**\r\n * n3 string\r\n *\r\n * The subject formula, expressed as N3, gives this string.\r\n *\r\n * http://www.w3.org/2000/10/swap/log#n3String\r\n */\r\nvar n3String = 'http://www.w3.org/2000/10/swap/log#n3String';\r\n/**\r\n * semantics\r\n *\r\n * The log:semantics of a document is the formula.\r\n * achieved by parsing representation of the document.\r\n *  For a document in Notation3, log:semantics is the\r\n * log:parsedAsN3 of the log:contents of the document.\r\n * For a document in RDF/XML, it is parsed according to the\r\n * RDF/XML specification to yield an RDF formula\r\n * (a subclass of N3 log:Formula).\r\n *\r\n * [Aside: Philosophers will be distracted here into worrying about the meaning\r\n * of meaning. At least we didn't call this function \"meaning\"!\r\n * In as much as N3 is used as an interlingua for interoperability\r\n * for different systems, this for an N3 based system is the meaning\r\n * expressed by a document.]\r\n *\r\n * (Cwm knows how to go get a document and parse N3 and RDF/XML\r\n * it in order to evaluate this.\r\n * Other languages for web documents\r\n * may be defined whose N3 semantics are therefore\r\n * also calculable, and so they could be added in due course.\r\n * See for example GRDDL, RDFa, etc)\r\n *\r\n * http://www.w3.org/2000/10/swap/log#semantics\r\n */\r\nvar semantics = 'http://www.w3.org/2000/10/swap/log#semantics';\r\n/**\r\n * semantics or error message\r\n *\r\n * This connects a document and either the formula it parses to,\r\n * or an error message explaining what went wrong with trying. See log:semantics.\r\n * (Cwm knows how to go get a document and parse it in order to evaluate this.)\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#semanticsOrError\r\n */\r\nvar semanticsOrError = 'http://www.w3.org/2000/10/swap/log#semanticsOrError';\r\n/**\r\n * content\r\n *\r\n * This connects a document and a string that represents it.\r\n * (Cwm knows how to go get a document in order to evaluate this.)\r\n * Note that the content-type of the information is not given and\r\n * so must be known or guessed.\r\n *\r\n * http://www.w3.org/2000/10/swap/log#content\r\n */\r\nvar content = 'http://www.w3.org/2000/10/swap/log#content';\r\n/**\r\n * conjunction\r\n *\r\n * \"A function to merge formulae: logical AND.\r\n *\r\n * The subject is a list of formulae.\r\n * The object, which can be generated, is a formula containing a copy\r\n * of each of the formulae in the list on the left.\r\n * A cwm built-in function.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#conjunction\r\n */\r\nvar conjunction = 'http://www.w3.org/2000/10/swap/log#conjunction';\r\n/**\r\n * conclusion\r\n *\r\n * All possible conclusions which can be drawn from a formula.\r\n *\r\n * The object of this function, a formula, is the set of conclusions which can be\r\n * drawn from the subject formula, by successively applying any\r\n * rules it contains to the data it contains. This is equivalent to\r\n * cwm's \"--think\" command line function.  It does use built-ins, so\r\n * it may for example indirectly invoke other documents, validate\r\n * signatures, etc.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#conclusion\r\n */\r\nvar conclusion = 'http://www.w3.org/2000/10/swap/log#conclusion';\r\n/**\r\n * definitive document\r\n *\r\n * \tWhen document D is the definitiveDocument for property P,\r\n * any statement X P Y is true iff and only if the semantics of document D\r\n * include that statement.\r\n *\r\n * For example, there may be a definitive document for the zipcode of\r\n * airports by airport code, and so on. This is useful to let a reasoner\r\n * know that it can extend its query to the given document.\r\n * (Cwm will do this if its mode includes \"r\").\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#definitiveDocument\r\n */\r\nvar definitiveDocument = 'http://www.w3.org/2000/10/swap/log#definitiveDocument';\r\n/**\r\n * definitive service\r\n *\r\n * \tWhen service S is the definitiveService for property P,\r\n * any statement X P Y is true iff and only if a query to S returns\r\n * that it is.  The protocol for the service S depends on the scheme.\r\n * For mysql protocol, the URI of the service is like\r\n * sql://user:password@host.domain/database/.\r\n *\r\n * For example, there may be a definitive service for the zipcode of\r\n * airports by airport code, and so on. This is useful to let a reasoner\r\n * know that it can help resolve a query by delegating it to the service\r\n * in question.\r\n * (Cwm will do this if its mode includes \"r\").\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#definitiveService\r\n */\r\nvar definitiveService = 'http://www.w3.org/2000/10/swap/log#definitiveService';\r\n/**\r\n * output string\r\n *\r\n * The subject is a key and the object is a string,\r\n * where the strings are to be output in the order of the keys.\r\n * See cwm --strings in cwm --help.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#outputString\r\n */\r\nvar outputString = 'http://www.w3.org/2000/10/swap/log#outputString';\r\n/**\r\n *\r\n *\r\n * This allows one to look at the actual string of the URI which identifies this.\r\n *\r\n * (Cwm can get the URI of a resource or get the resource from the URI.)\r\n * This is a level breaker, breaking the rule of not looking inside a\r\n * URI.   Use (eg with  string:match) to replace RDF's old \"aboutEach\"\r\n * functionality. Use to implement the URI spec and protocol specs, etc.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#uri\r\n */\r\nvar uri = 'http://www.w3.org/2000/10/swap/log#uri';\r\n/**\r\n *\r\n *\r\n * This allows one to look at the actual string of the URI which identifies this,\r\n * for anything, even a blank node or a formula. This peeks into the internal\r\n * workings of cwm, and so is not normally used. Use log:uri instead.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#rawUri\r\n */\r\nvar rawUri = 'http://www.w3.org/2000/10/swap/log#rawUri';\r\n/**\r\n *\r\n *\r\n * For anything identified by a URI with a fragid, this is the\r\n * thing identified by the same URI without a hash or fragid.\r\n * For anything else, it is itself.\r\n *\r\n * http://www.w3.org/2000/10/swap/log#racine\r\n */\r\nvar racine = 'http://www.w3.org/2000/10/swap/log#racine';\r\n/**\r\n *\r\n *\r\n * Takes a list of a string and a URI and creates a datatyped\r\n *      literal. For example, { (\"2005-03-30T11:00:00\" :tz) log:dtlit ?X } => { ?X a :Answer } .\r\n *     will produce \"2005-03-30T11:00:00\"^^:tz a :Answer .\r\n *\r\n * http://www.w3.org/2000/10/swap/log#dtlit\r\n */\r\nvar dtlit = 'http://www.w3.org/2000/10/swap/log#dtlit';\r\n/**\r\n *\r\n *\r\n * A document which, which parsed as Notation3\r\n * as defined in general by http://www.w3.org/DesignIssues/Notation3.html\r\n * and this schema, conveys the intent of the author by the semantics defined\r\n * on those specifications, and the semantics defined by the specifications\r\n * of any other identifiers used in the document.\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#N3Document\r\n */\r\nvar N3Document = 'http://www.w3.org/2000/10/swap/log#N3Document';\r\n/**\r\n *\r\n *\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#Formula\r\n */\r\nvar Formula = 'http://www.w3.org/2000/10/swap/log#Formula';\r\n/**\r\n *\r\n *\r\n * null\r\n * Note that `String` is a reserved Javascript keyword, and is therefore suffixed by `__workaround`.\r\n * For a list of reserved keywords, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords.\r\n *\r\n * http://www.w3.org/2000/10/swap/log#String\r\n */\r\nvar String__workaround = 'http://www.w3.org/2000/10/swap/log#String';\r\n/**\r\n *\r\n *\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#List\r\n */\r\nvar List = 'http://www.w3.org/2000/10/swap/log#List';\r\n/**\r\n *\r\n *\r\n *\r\n *\r\n * http://www.w3.org/2000/10/swap/log#Other\r\n */\r\nvar Other = 'http://www.w3.org/2000/10/swap/log#Other';\r\n/**\r\n *\r\n *\r\n * Something which is true: believe it as you would believe this.\r\n *\r\n * \tUnderstood natively by cwm in that it will execute rules in a formula\r\n * \tdeclared a Truth within a formula it is already taking rules from.\r\n *\r\n * http://www.w3.org/2000/10/swap/log#Truth\r\n */\r\nvar Truth = 'http://www.w3.org/2000/10/swap/log#Truth';\r\n/**\r\n *\r\n *\r\n * Any statement mentioning anything in this class\r\n * is considered boring and purged by the cwm --purge option.\r\n * This is a convenience, and does not have any value when published as a\r\n * general fact on the web.\r\n *\r\n * http://www.w3.org/2000/10/swap/log#Chaff\r\n */\r\nvar Chaff = 'http://www.w3.org/2000/10/swap/log#Chaff';\n\nvar logImport = /*#__PURE__*/Object.freeze({\n\tequalTo: equalTo,\n\tnotEqualTo: notEqualTo,\n\trawType: rawType,\n\timplies: implies,\n\tincludes: includes,\n\tnotIncludes: notIncludes,\n\tparsedAsN3: parsedAsN3,\n\tn3String: n3String,\n\tsemantics: semantics,\n\tsemanticsOrError: semanticsOrError,\n\tcontent: content,\n\tconjunction: conjunction,\n\tconclusion: conclusion,\n\tdefinitiveDocument: definitiveDocument,\n\tdefinitiveService: definitiveService,\n\toutputString: outputString,\n\turi: uri,\n\trawUri: rawUri,\n\tracine: racine,\n\tdtlit: dtlit,\n\tN3Document: N3Document,\n\tFormula: Formula,\n\tString__workaround: String__workaround,\n\tList: List,\n\tOther: Other,\n\tTruth: Truth,\n\tChaff: Chaff\n});\n\nexport { Chaff as C, Formula as F, List as L, N3Document as N, Other as O, String__workaround as S, Truth as T, includes as a, notIncludes as b, n3String as c, semanticsOrError as d, equalTo as e, content as f, conjunction as g, conclusion as h, implies as i, definitiveDocument as j, definitiveService as k, rawUri as l, racine as m, notEqualTo as n, outputString as o, parsedAsN3 as p, dtlit as q, rawType as r, semantics as s, logImport as t, uri as u };\n"]},"metadata":{},"sourceType":"module"}