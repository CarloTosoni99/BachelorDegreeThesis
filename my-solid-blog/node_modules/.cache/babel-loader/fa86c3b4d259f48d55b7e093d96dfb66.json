{"ast":null,"code":"import { createSolidDataset, getSolidDataset, saveSolidDatasetAt, createThing, getThing, addStringNoLocale, addUrl, getSourceUrl, getUrl, setThing, asUrl } from \"@inrupt/solid-client\";\nimport { solid, rdf, schema } from 'rdf-namespaces';\nexport async function getOrCreateDataset(containerUri, fetch, publicTypeIndexUri) {\n  //Attempt 2, not yet working\n  const publicTypeIndex = await getSolidDataset(publicTypeIndexUri);\n  console.log(\"Questo sempre stampato\");\n\n  if (publicTypeIndex === null) {\n    console.log(\"indice pubblico non caricato errore\");\n  }\n\n  const articleListThing = getThing(publicTypeIndex, \"https://carlotosoni99.inrupt.net/settings/publicTypeIndex.ttl#articlelist\");\n\n  if (articleListThing === null) {\n    const articlelistUri = containerUri + \"articlelist.ttl\";\n    return await initialiseArticlelist(articlelistUri, fetch, publicTypeIndex, publicTypeIndexUri);\n  }\n\n  const articlelistUri = getUrl(articleListThing, solid.instance);\n\n  if (articlelistUri === null) {\n    console.log(\"eh no eh, eh noooo uri del dataset articlelist è nullo\");\n  }\n\n  return await getSolidDataset(articlelistUri); //Attempt 1, working\n\n  /*\n  const articlelistUri = containerUri + \"articlelist.ttl\";\n   try {\n    const articlelistDataset = await getSolidDataset(\n      articlelistUri,\n      {\n      fetch: fetch,\n      },\n    );\n    return articlelistDataset;\n  } catch(e) {\n    if(e.statusCode === 404) {\n      const articlelistDataset = await saveSolidDatasetAt(\n        articlelistUri,\n        createSolidDataset(),\n        {\n        fetch: fetch,\n        },\n      );\n      return articlelistDataset\n    }\n  }\n  return;\n  */\n} //Attempt 2, not yet working\n\nasync function initialiseArticlelist(articlelistUri, fetch, publicTypeIndex, publicTypeIndexUri) {\n  const articlelistDataset = await saveSolidDatasetAt(articlelistUri, createSolidDataset(), {\n    fetch: fetch\n  });\n  const newPublicThing = createThing({\n    url: \"https://carlotosoni99.inrupt.net/settings/publicTypeIndex.ttl#articlelist\"\n  });\n  console.log(\"Nuovo oggetto creato pubblico url: \" + asUrl(newPublicThing));\n  const thingWithType = addStringNoLocale(newPublicThing, rdf.type, solid.TypeRegistration);\n  const thingWithForClass = addStringNoLocale(thingWithType, solid.forClass, schema.TextDigitalDocument);\n  const thingWithInstance = add(thingWithForClass, solid.instance, getSourceUrl(articlelistDataset));\n  const uploadedPublicTypeIndex = setThing(publicTypeIndex, thingWithInstance);\n  await saveSolidDatasetAt(publicTypeIndexUri, uploadedPublicTypeIndex, {\n    fetch: fetch\n  });\n  return articlelistDataset;\n}","map":{"version":3,"sources":["/home/carlo/Desktop/Project/my-solid-blog-test/src/utils/GetOrCreateDataset.js"],"names":["createSolidDataset","getSolidDataset","saveSolidDatasetAt","createThing","getThing","addStringNoLocale","addUrl","getSourceUrl","getUrl","setThing","asUrl","solid","rdf","schema","getOrCreateDataset","containerUri","fetch","publicTypeIndexUri","publicTypeIndex","console","log","articleListThing","articlelistUri","initialiseArticlelist","instance","articlelistDataset","newPublicThing","url","thingWithType","type","TypeRegistration","thingWithForClass","forClass","TextDigitalDocument","thingWithInstance","add","uploadedPublicTypeIndex"],"mappings":"AAAA,SACEA,kBADF,EAEEC,eAFF,EAGEC,kBAHF,EAIEC,WAJF,EAKEC,QALF,EAMEC,iBANF,EAOEC,MAPF,EAQEC,YARF,EASEC,MATF,EAUEC,QAVF,EAWEC,KAXF,QAYO,sBAZP;AAcA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,MAArB,QAAmC,gBAAnC;AAGA,OAAO,eAAeC,kBAAf,CAAkCC,YAAlC,EAAgDC,KAAhD,EAAuDC,kBAAvD,EAA2E;AAEhF;AACA,QAAMC,eAAe,GAAG,MAAMjB,eAAe,CAACgB,kBAAD,CAA7C;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AACA,MAAKF,eAAe,KAAK,IAAzB,EAAgC;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACD;;AAED,QAAMC,gBAAgB,GAAGjB,QAAQ,CAACc,eAAD,EAAkB,2EAAlB,CAAjC;;AAEA,MAAKG,gBAAgB,KAAK,IAA1B,EAAiC;AAC/B,UAAMC,cAAc,GAAGP,YAAY,GAAG,iBAAtC;AACA,WAAO,MAAMQ,qBAAqB,CAACD,cAAD,EAAiBN,KAAjB,EAAwBE,eAAxB,EAAyCD,kBAAzC,CAAlC;AACD;;AAED,QAAMK,cAAc,GAAGd,MAAM,CAACa,gBAAD,EAAmBV,KAAK,CAACa,QAAzB,CAA7B;;AAEA,MAAGF,cAAc,KAAK,IAAtB,EAA4B;AAC1BH,IAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACD;;AACD,SAAO,MAAMnB,eAAe,CAACqB,cAAD,CAA5B,CAtBgF,CAwBhF;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC,C,CAGD;;AACA,eAAeC,qBAAf,CAAsCD,cAAtC,EAAsDN,KAAtD,EAA6DE,eAA7D,EAA8ED,kBAA9E,EAAkG;AAChG,QAAMQ,kBAAkB,GAAG,MAAMvB,kBAAkB,CACjDoB,cADiD,EAEjDtB,kBAAkB,EAF+B,EAGjD;AACAgB,IAAAA,KAAK,EAAEA;AADP,GAHiD,CAAnD;AAQA,QAAMU,cAAc,GAAGvB,WAAW,CAAC;AAACwB,IAAAA,GAAG,EAAE;AAAN,GAAD,CAAlC;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAY,wCAAwCV,KAAK,CAACgB,cAAD,CAAzD;AAEA,QAAME,aAAa,GAAGvB,iBAAiB,CACrCqB,cADqC,EAErCd,GAAG,CAACiB,IAFiC,EAGrClB,KAAK,CAACmB,gBAH+B,CAAvC;AAMA,QAAMC,iBAAiB,GAAG1B,iBAAiB,CACzCuB,aADyC,EAEzCjB,KAAK,CAACqB,QAFmC,EAGzCnB,MAAM,CAACoB,mBAHkC,CAA3C;AAMA,QAAMC,iBAAiB,GAAGC,GAAG,CAC3BJ,iBAD2B,EAE3BpB,KAAK,CAACa,QAFqB,EAG3BjB,YAAY,CAACkB,kBAAD,CAHe,CAA7B;AAMA,QAAMW,uBAAuB,GAAG3B,QAAQ,CACtCS,eADsC,EAEtCgB,iBAFsC,CAAxC;AAKA,QAAMhC,kBAAkB,CACtBe,kBADsB,EAEtBmB,uBAFsB,EAGtB;AACEpB,IAAAA,KAAK,EAAEA;AADT,GAHsB,CAAxB;AAQA,SAAOS,kBAAP;AACD","sourcesContent":["import {\n  createSolidDataset,\n  getSolidDataset,\n  saveSolidDatasetAt,\n  createThing,\n  getThing,\n  addStringNoLocale,\n  addUrl,\n  getSourceUrl,\n  getUrl,\n  setThing,\n  asUrl,\n} from \"@inrupt/solid-client\";\n\nimport { solid, rdf, schema } from 'rdf-namespaces';\n\n\nexport async function getOrCreateDataset(containerUri, fetch, publicTypeIndexUri) {\n\n  //Attempt 2, not yet working\n  const publicTypeIndex = await getSolidDataset(publicTypeIndexUri);\n\n  console.log(\"Questo sempre stampato\");\n  if ( publicTypeIndex === null ) {\n    console.log(\"indice pubblico non caricato errore\");\n  }\n\n  const articleListThing = getThing(publicTypeIndex, \"https://carlotosoni99.inrupt.net/settings/publicTypeIndex.ttl#articlelist\");\n\n  if ( articleListThing === null ) {\n    const articlelistUri = containerUri + \"articlelist.ttl\";\n    return await initialiseArticlelist(articlelistUri, fetch, publicTypeIndex, publicTypeIndexUri);\n  }\n\n  const articlelistUri = getUrl(articleListThing, solid.instance);\n\n  if(articlelistUri === null ){\n    console.log(\"eh no eh, eh noooo uri del dataset articlelist è nullo\");\n  }\n  return await getSolidDataset(articlelistUri);\n\n  //Attempt 1, working\n  /*\n  const articlelistUri = containerUri + \"articlelist.ttl\";\n\n  try {\n    const articlelistDataset = await getSolidDataset(\n      articlelistUri,\n      {\n      fetch: fetch,\n      },\n    );\n    return articlelistDataset;\n  } catch(e) {\n    if(e.statusCode === 404) {\n      const articlelistDataset = await saveSolidDatasetAt(\n        articlelistUri,\n        createSolidDataset(),\n        {\n        fetch: fetch,\n        },\n      );\n      return articlelistDataset\n    }\n  }\n  return;\n  */\n}\n\n\n//Attempt 2, not yet working\nasync function initialiseArticlelist (articlelistUri, fetch, publicTypeIndex, publicTypeIndexUri) {\n  const articlelistDataset = await saveSolidDatasetAt(\n    articlelistUri,\n    createSolidDataset(),\n    {\n    fetch: fetch,\n    },\n  );\n\n  const newPublicThing = createThing({url: \"https://carlotosoni99.inrupt.net/settings/publicTypeIndex.ttl#articlelist\"});\n  console.log(\"Nuovo oggetto creato pubblico url: \" + asUrl(newPublicThing));\n\n  const thingWithType = addStringNoLocale(\n    newPublicThing,\n    rdf.type,\n    solid.TypeRegistration,\n  );\n\n  const thingWithForClass = addStringNoLocale(\n    thingWithType,\n    solid.forClass,\n    schema.TextDigitalDocument\n  );\n\n  const thingWithInstance = add(\n    thingWithForClass,\n    solid.instance,\n    getSourceUrl(articlelistDataset),\n  );\n\n  const uploadedPublicTypeIndex = setThing(\n    publicTypeIndex,\n    thingWithInstance,\n  );\n\n  await saveSolidDatasetAt(\n    publicTypeIndexUri,\n    uploadedPublicTypeIndex,\n    {\n      fetch: fetch,\n    },  \n  );\n\n  return articlelistDataset;\n}"]},"metadata":{},"sourceType":"module"}