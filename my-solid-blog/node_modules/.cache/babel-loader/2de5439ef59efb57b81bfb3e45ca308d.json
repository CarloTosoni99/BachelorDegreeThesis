{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handleRegistration = exports.determineSigningAlg = void 0;\n\nfunction isValidUrl(url) {\n  try {\n    new URL(url);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\n\nfunction determineSigningAlg(supported, preferred) {\n  var _a;\n\n  return (_a = preferred.find(signingAlg => {\n    return supported.includes(signingAlg);\n  })) !== null && _a !== void 0 ? _a : null;\n}\n\nexports.determineSigningAlg = determineSigningAlg;\n\nasync function handleRegistration(options, issuerConfig, storageUtility, clientRegistrar) {\n  if (options.clientId === undefined || issuerConfig.solidOidcSupported !== \"https://solidproject.org/TR/solid-oidc\" && isValidUrl(options.clientId)) {\n    return clientRegistrar.getClient({\n      sessionId: options.sessionId,\n      clientName: options.clientName,\n      redirectUrl: options.redirectUrl\n    }, issuerConfig);\n  }\n\n  await storageUtility.setForUser(options.sessionId, {\n    clientId: options.clientId\n  });\n\n  if (options.clientSecret) {\n    await storageUtility.setForUser(options.sessionId, {\n      clientSecret: options.clientSecret\n    });\n  }\n\n  if (options.clientName) {\n    await storageUtility.setForUser(options.sessionId, {\n      clientName: options.clientName\n    });\n  }\n\n  return {\n    clientId: options.clientId,\n    clientSecret: options.clientSecret,\n    clientName: options.clientName\n  };\n}\n\nexports.handleRegistration = handleRegistration;","map":{"version":3,"sources":["../../../src/login/oidc/IClientRegistrar.ts"],"names":[],"mappings":";;;;;;;AAgDA,SAAS,UAAT,CAAoB,GAApB,EAA+B;AAC7B,MAAI;AAIF,QAAI,GAAJ,CAAQ,GAAR;AACA,WAAO,IAAP;AACD,GAND,CAME,OAAA,EAAA,EAAM;AACN,WAAO,KAAP;AACD;AACF;;AAED,SAAgB,mBAAhB,CACE,SADF,EAEE,SAFF,EAEqB;;;AAEnB,SACE,CAAA,EAAA,GAAA,SAAS,CAAC,IAAV,CAAgB,UAAD,IAAe;AAC5B,WAAO,SAAS,CAAC,QAAV,CAAmB,UAAnB,CAAP;AACD,GAFD,CAAA,MAEE,IAFF,IAEE,EAAA,KAAA,KAAA,CAFF,GAEE,EAFF,GAEM,IAHR;AAKD;;AATD,OAAA,CAAA,mBAAA,GAAA,mBAAA;;AAWO,eAAe,kBAAf,CACL,OADK,EAEL,YAFK,EAGL,cAHK,EAIL,eAJK,EAI4B;AAEjC,MACE,OAAO,CAAC,QAAR,KAAqB,SAArB,IACC,YAAY,CAAC,kBAAb,KACC,wCADD,IAEC,UAAU,CAAC,OAAO,CAAC,QAAT,CAJd,EAKE;AAKA,WAAO,eAAe,CAAC,SAAhB,CACL;AACE,MAAA,SAAS,EAAE,OAAO,CAAC,SADrB;AAEE,MAAA,UAAU,EAAE,OAAO,CAAC,UAFtB;AAGE,MAAA,WAAW,EAAE,OAAO,CAAC;AAHvB,KADK,EAML,YANK,CAAP;AAQD;;AAKD,QAAM,cAAc,CAAC,UAAf,CAA0B,OAAO,CAAC,SAAlC,EAA6C;AACjD,IAAA,QAAQ,EAAE,OAAO,CAAC;AAD+B,GAA7C,CAAN;;AAGA,MAAI,OAAO,CAAC,YAAZ,EAA0B;AACxB,UAAM,cAAc,CAAC,UAAf,CAA0B,OAAO,CAAC,SAAlC,EAA6C;AACjD,MAAA,YAAY,EAAE,OAAO,CAAC;AAD2B,KAA7C,CAAN;AAGD;;AACD,MAAI,OAAO,CAAC,UAAZ,EAAwB;AACtB,UAAM,cAAc,CAAC,UAAf,CAA0B,OAAO,CAAC,SAAlC,EAA6C;AACjD,MAAA,UAAU,EAAE,OAAO,CAAC;AAD6B,KAA7C,CAAN;AAGD;;AACD,SAAO;AACL,IAAA,QAAQ,EAAE,OAAO,CAAC,QADb;AAEL,IAAA,YAAY,EAAE,OAAO,CAAC,YAFjB;AAGL,IAAA,UAAU,EAAE,OAAO,CAAC;AAHf,GAAP;AAKD;;AA/CD,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleRegistration = exports.determineSigningAlg = void 0;\nfunction isValidUrl(url) {\n    try {\n        new URL(url);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction determineSigningAlg(supported, preferred) {\n    var _a;\n    return ((_a = preferred.find((signingAlg) => {\n        return supported.includes(signingAlg);\n    })) !== null && _a !== void 0 ? _a : null);\n}\nexports.determineSigningAlg = determineSigningAlg;\nasync function handleRegistration(options, issuerConfig, storageUtility, clientRegistrar) {\n    if (options.clientId === undefined ||\n        (issuerConfig.solidOidcSupported !==\n            \"https://solidproject.org/TR/solid-oidc\" &&\n            isValidUrl(options.clientId))) {\n        return clientRegistrar.getClient({\n            sessionId: options.sessionId,\n            clientName: options.clientName,\n            redirectUrl: options.redirectUrl,\n        }, issuerConfig);\n    }\n    await storageUtility.setForUser(options.sessionId, {\n        clientId: options.clientId,\n    });\n    if (options.clientSecret) {\n        await storageUtility.setForUser(options.sessionId, {\n            clientSecret: options.clientSecret,\n        });\n    }\n    if (options.clientName) {\n        await storageUtility.setForUser(options.sessionId, {\n            clientName: options.clientName,\n        });\n    }\n    return {\n        clientId: options.clientId,\n        clientSecret: options.clientSecret,\n        clientName: options.clientName,\n    };\n}\nexports.handleRegistration = handleRegistration;\n//# sourceMappingURL=IClientRegistrar.js.map"]},"metadata":{},"sourceType":"script"}