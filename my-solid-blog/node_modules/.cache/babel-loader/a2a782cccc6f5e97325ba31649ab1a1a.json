{"ast":null,"code":"import { createSolidDataset, getSolidDataset, saveSolidDatasetAt, createThing, getThing, addStringNoLocale, getSourceUrl, getUrl, setThing } from \"@inrupt/solid-client\";\nimport { solid, rdf, schema } from 'rdf-namespaces';\nexport async function getOrCreateDataset(containerUri, fetch, publicTypeIndexUri) {\n  //Attempt 2, not yet working\n  const publicTypeIndex = await getSolidDataset(publicTypeIndexUri);\n  console.log(\"Questo sempre stampato\");\n\n  if (publicTypeIndex === null) {\n    console.log(\"indice pubblico non caricato errore\");\n  }\n\n  const articleListThing = getThing(publicTypeIndex, \"articlelist\");\n\n  if (articleListThing === null) {\n    const articlelistUri = containerUri + \"articlelist.ttl\";\n    return await initialiseArticlelist(articlelistUri, publicTypeIndex, publicTypeIndexUri);\n  }\n\n  const articlelistUri = getUrl(publicTypeIndex, solid.instance);\n  return await getSolidDataset(articlelistUri); //Attempt 1, working\n\n  /*\n  const articlelistUri = containerUri + \"articlelist.ttl\";\n   try {\n    const articlelistDataset = await getSolidDataset(\n      articlelistUri,\n      {\n      fetch: fetch,\n      },\n    );\n    return articlelistDataset;\n  } catch(e) {\n    if(e.statusCode === 404) {\n      const articlelistDataset = await saveSolidDatasetAt(\n        articlelistUri,\n        createSolidDataset(),\n        {\n        fetch: fetch,\n        },\n      );\n      return articlelistDataset\n    }\n  }\n  return;\n  */\n} //Attempt 2, not yet working\n\nasync function initialiseArticlelist(articlelistUri, publicTypeIndex, publicTypeIndexUri) {\n  const articlelistDataset = await saveSolidDatasetAt(articlelistUri, createSolidDataset(), {\n    fetch: fetch\n  });\n  const newPublicThing = createThing({\n    url: \"articlelistUrl\"\n  });\n  const thingWithType = addStringNoLocale(newPublicThing, rdf.type, solid.TypeRegistration);\n  const thingWithForClass = addStringNoLocale(thingWithType, solid.forClass, schema.TextDigitalDocument);\n  const thingWithInstance = addStringNoLocale(thingWithForClass, solid.instance, getSourceUrl(articlelistDataset));\n  const uploadedPublicTypeIndex = setThing(publicTypeIndex, thingWithInstance);\n  const savedPublicTypeIndex = await saveSolidDatasetAt(publicTypeIndexUri, uploadedPublicTypeIndex, {\n    fetch: fetch\n  });\n  return articlelistDataset;\n}","map":{"version":3,"sources":["/home/carlo/Desktop/Project/my-solid-blog/src/utils/GetOrCreateDataset.js"],"names":["createSolidDataset","getSolidDataset","saveSolidDatasetAt","createThing","getThing","addStringNoLocale","getSourceUrl","getUrl","setThing","solid","rdf","schema","getOrCreateDataset","containerUri","fetch","publicTypeIndexUri","publicTypeIndex","console","log","articleListThing","articlelistUri","initialiseArticlelist","instance","articlelistDataset","newPublicThing","url","thingWithType","type","TypeRegistration","thingWithForClass","forClass","TextDigitalDocument","thingWithInstance","uploadedPublicTypeIndex","savedPublicTypeIndex"],"mappings":"AAAA,SACEA,kBADF,EAEEC,eAFF,EAGEC,kBAHF,EAIEC,WAJF,EAKEC,QALF,EAMEC,iBANF,EAOEC,YAPF,EAQEC,MARF,EASEC,QATF,QAUO,sBAVP;AAYA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,MAArB,QAAmC,gBAAnC;AAGA,OAAO,eAAeC,kBAAf,CAAkCC,YAAlC,EAAgDC,KAAhD,EAAuDC,kBAAvD,EAA2E;AAEhF;AACA,QAAMC,eAAe,GAAG,MAAMf,eAAe,CAACc,kBAAD,CAA7C;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AACA,MAAKF,eAAe,KAAK,IAAzB,EAAgC;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACD;;AAED,QAAMC,gBAAgB,GAAGf,QAAQ,CAACY,eAAD,EAAkB,aAAlB,CAAjC;;AAEA,MAAKG,gBAAgB,KAAK,IAA1B,EAAiC;AAC/B,UAAMC,cAAc,GAAGP,YAAY,GAAG,iBAAtC;AACA,WAAO,MAAMQ,qBAAqB,CAACD,cAAD,EAAiBJ,eAAjB,EAAkCD,kBAAlC,CAAlC;AACD;;AAED,QAAMK,cAAc,GAAGb,MAAM,CAACS,eAAD,EAAkBP,KAAK,CAACa,QAAxB,CAA7B;AACA,SAAO,MAAMrB,eAAe,CAACmB,cAAD,CAA5B,CAlBgF,CAoBhF;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC,C,CAGD;;AACA,eAAeC,qBAAf,CAAsCD,cAAtC,EAAsDJ,eAAtD,EAAuED,kBAAvE,EAA2F;AACzF,QAAMQ,kBAAkB,GAAG,MAAMrB,kBAAkB,CACjDkB,cADiD,EAEjDpB,kBAAkB,EAF+B,EAGjD;AACAc,IAAAA,KAAK,EAAEA;AADP,GAHiD,CAAnD;AAQA,QAAMU,cAAc,GAAGrB,WAAW,CAAC;AAACsB,IAAAA,GAAG,EAAE;AAAN,GAAD,CAAlC;AAEA,QAAMC,aAAa,GAAGrB,iBAAiB,CACrCmB,cADqC,EAErCd,GAAG,CAACiB,IAFiC,EAGrClB,KAAK,CAACmB,gBAH+B,CAAvC;AAMA,QAAMC,iBAAiB,GAAGxB,iBAAiB,CACzCqB,aADyC,EAEzCjB,KAAK,CAACqB,QAFmC,EAGzCnB,MAAM,CAACoB,mBAHkC,CAA3C;AAMA,QAAMC,iBAAiB,GAAG3B,iBAAiB,CACzCwB,iBADyC,EAEzCpB,KAAK,CAACa,QAFmC,EAGzChB,YAAY,CAACiB,kBAAD,CAH6B,CAA3C;AAMA,QAAMU,uBAAuB,GAAGzB,QAAQ,CACtCQ,eADsC,EAEtCgB,iBAFsC,CAAxC;AAKA,QAAME,oBAAoB,GAAG,MAAMhC,kBAAkB,CACnDa,kBADmD,EAEnDkB,uBAFmD,EAGnD;AACEnB,IAAAA,KAAK,EAAEA;AADT,GAHmD,CAArD;AAQA,SAAOS,kBAAP;AACD","sourcesContent":["import {\n  createSolidDataset,\n  getSolidDataset,\n  saveSolidDatasetAt,\n  createThing,\n  getThing,\n  addStringNoLocale,\n  getSourceUrl,\n  getUrl,\n  setThing,\n} from \"@inrupt/solid-client\";\n\nimport { solid, rdf, schema } from 'rdf-namespaces';\n\n\nexport async function getOrCreateDataset(containerUri, fetch, publicTypeIndexUri) {\n\n  //Attempt 2, not yet working\n  const publicTypeIndex = await getSolidDataset(publicTypeIndexUri);\n\n  console.log(\"Questo sempre stampato\");\n  if ( publicTypeIndex === null ) {\n    console.log(\"indice pubblico non caricato errore\");\n  }\n\n  const articleListThing = getThing(publicTypeIndex, \"articlelist\");\n\n  if ( articleListThing === null ) {\n    const articlelistUri = containerUri + \"articlelist.ttl\";\n    return await initialiseArticlelist(articlelistUri, publicTypeIndex, publicTypeIndexUri);\n  }\n\n  const articlelistUri = getUrl(publicTypeIndex, solid.instance);\n  return await getSolidDataset(articlelistUri);\n\n  //Attempt 1, working\n  /*\n  const articlelistUri = containerUri + \"articlelist.ttl\";\n\n  try {\n    const articlelistDataset = await getSolidDataset(\n      articlelistUri,\n      {\n      fetch: fetch,\n      },\n    );\n    return articlelistDataset;\n  } catch(e) {\n    if(e.statusCode === 404) {\n      const articlelistDataset = await saveSolidDatasetAt(\n        articlelistUri,\n        createSolidDataset(),\n        {\n        fetch: fetch,\n        },\n      );\n      return articlelistDataset\n    }\n  }\n  return;\n  */\n}\n\n\n//Attempt 2, not yet working\nasync function initialiseArticlelist (articlelistUri, publicTypeIndex, publicTypeIndexUri) {\n  const articlelistDataset = await saveSolidDatasetAt(\n    articlelistUri,\n    createSolidDataset(),\n    {\n    fetch: fetch,\n    },\n  );\n\n  const newPublicThing = createThing({url: \"articlelistUrl\"});\n\n  const thingWithType = addStringNoLocale(\n    newPublicThing,\n    rdf.type,\n    solid.TypeRegistration,\n  );\n\n  const thingWithForClass = addStringNoLocale(\n    thingWithType,\n    solid.forClass,\n    schema.TextDigitalDocument\n  );\n\n  const thingWithInstance = addStringNoLocale(\n    thingWithForClass,\n    solid.instance,\n    getSourceUrl(articlelistDataset),\n  );\n\n  const uploadedPublicTypeIndex = setThing(\n    publicTypeIndex,\n    thingWithInstance,\n  );\n\n  const savedPublicTypeIndex = await saveSolidDatasetAt(\n    publicTypeIndexUri,\n    uploadedPublicTypeIndex,\n    {\n      fetch: fetch,\n    },  \n  );\n\n  return articlelistDataset;\n}"]},"metadata":{},"sourceType":"module"}