{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Session = exports.silentlyAuthenticate = void 0;\n\nconst events_1 = require(\"events\");\n\nconst uuid_1 = require(\"uuid\");\n\nconst dependencies_1 = require(\"./dependencies\");\n\nconst constant_1 = require(\"./constant\");\n\nconst iframe_1 = require(\"./iframe\");\n\nasync function silentlyAuthenticate(sessionId, clientAuthn, options = {\n  inIframe: false\n}) {\n  var _a;\n\n  const storedSessionInfo = await clientAuthn.validateCurrentSession();\n\n  if (storedSessionInfo !== null) {\n    window.localStorage.setItem(constant_1.KEY_CURRENT_URL, window.location.href);\n    await clientAuthn.login({\n      sessionId,\n      prompt: \"none\",\n      oidcIssuer: storedSessionInfo.issuer,\n      redirectUrl: storedSessionInfo.redirectUrl,\n      clientId: storedSessionInfo.clientAppId,\n      clientSecret: storedSessionInfo.clientAppSecret,\n      tokenType: (_a = storedSessionInfo.tokenType) !== null && _a !== void 0 ? _a : \"DPoP\",\n      inIframe: options.inIframe\n    });\n    return true;\n  }\n\n  return false;\n}\n\nexports.silentlyAuthenticate = silentlyAuthenticate;\n\nfunction isLoggedIn(sessionInfo) {\n  return !!(sessionInfo === null || sessionInfo === void 0 ? void 0 : sessionInfo.isLoggedIn);\n}\n\nclass Session extends events_1.EventEmitter {\n  constructor(sessionOptions = {}, sessionId) {\n    super();\n    this.tokenRequestInProgress = false;\n    this.tmpFetchWithCookies = false;\n\n    this.login = async options => {\n      var _a;\n\n      await this.clientAuthentication.login({\n        sessionId: this.info.sessionId,\n        ...options,\n        tokenType: (_a = options.tokenType) !== null && _a !== void 0 ? _a : \"DPoP\"\n      });\n      return new Promise(() => undefined);\n    };\n\n    this.fetch = async (url, init) => {\n      return this.clientAuthentication.fetch(url, { ...init,\n        credentials: this.tmpFetchWithCookies ? \"include\" : init === null || init === void 0 ? void 0 : init.credentials\n      });\n    };\n\n    this.logout = async () => {\n      await this.clientAuthentication.logout(this.info.sessionId);\n      this.info.isLoggedIn = false;\n      this.tmpFetchWithCookies = false;\n      this.emit(\"logout\");\n    };\n\n    this.handleIncomingRedirect = async (inputOptions = {}) => {\n      var _a;\n\n      if (this.info.isLoggedIn) {\n        return this.info;\n      }\n\n      if (this.tokenRequestInProgress) {\n        return undefined;\n      }\n\n      const options = typeof inputOptions === \"string\" ? {\n        url: inputOptions\n      } : inputOptions;\n      const url = (_a = options.url) !== null && _a !== void 0 ? _a : window.location.href;\n\n      if (window.frameElement !== null) {\n        iframe_1.postRedirectUrlToParent(url);\n        return undefined;\n      }\n\n      if (options.useEssSession !== true || options.restorePreviousSession === true) {\n        window.localStorage.setItem(\"tmp-resource-server-session-enabled\", \"false\");\n      } else {\n        window.localStorage.setItem(\"tmp-resource-server-session-enabled\", \"true\");\n      }\n\n      const storedSessionCookieReference = window.localStorage.getItem(\"tmp-resource-server-session-info\");\n\n      if (typeof storedSessionCookieReference === \"string\" && options.restorePreviousSession !== true && options.useEssSession === true) {\n        function isValidSessionCookieReference(reference) {\n          var _a;\n\n          const resourceServers = Object.keys((_a = reference.sessions) !== null && _a !== void 0 ? _a : {});\n          return typeof reference.webId === \"string\" && resourceServers.length > 0 && typeof reference.sessions[resourceServers[0]].expiration === \"number\";\n        }\n\n        const reference = JSON.parse(storedSessionCookieReference);\n\n        if (isValidSessionCookieReference(reference)) {\n          const resourceServers = Object.keys(reference.sessions);\n          const webIdOrigin = new URL(reference.webId).hostname;\n          const ownResourceServer = resourceServers.find(resourceServer => {\n            return new URL(resourceServer).hostname === webIdOrigin;\n          });\n          const relevantServer = ownResourceServer !== null && ownResourceServer !== void 0 ? ownResourceServer : resourceServers[0];\n\n          if (reference.sessions[relevantServer].expiration - Date.now() > 5 * 60 * 1000) {\n            this.info.isLoggedIn = true;\n            this.info.webId = reference.webId;\n            this.tmpFetchWithCookies = true;\n            return this.info;\n          }\n        }\n      }\n\n      this.tokenRequestInProgress = true;\n      const sessionInfo = await this.clientAuthentication.handleIncomingRedirect(url);\n\n      if (isLoggedIn(sessionInfo)) {\n        this.setSessionInfo(sessionInfo);\n        const currentUrl = window.localStorage.getItem(constant_1.KEY_CURRENT_URL);\n\n        if (currentUrl === null) {\n          this.emit(\"login\");\n        } else {\n          window.localStorage.removeItem(constant_1.KEY_CURRENT_URL);\n          this.emit(\"sessionRestore\", currentUrl);\n        }\n      } else if (options.restorePreviousSession === true) {\n        const storedSessionId = window.localStorage.getItem(constant_1.KEY_CURRENT_SESSION);\n\n        if (storedSessionId !== null) {\n          const attemptedSilentAuthentication = await silentlyAuthenticate(storedSessionId, this.clientAuthentication);\n\n          if (attemptedSilentAuthentication) {\n            return new Promise(() => {});\n          }\n        }\n      }\n\n      this.tokenRequestInProgress = false;\n      return sessionInfo;\n    };\n\n    if (sessionOptions.clientAuthentication) {\n      this.clientAuthentication = sessionOptions.clientAuthentication;\n    } else if (sessionOptions.secureStorage && sessionOptions.insecureStorage) {\n      this.clientAuthentication = dependencies_1.getClientAuthenticationWithDependencies({\n        secureStorage: sessionOptions.secureStorage,\n        insecureStorage: sessionOptions.insecureStorage\n      });\n    } else {\n      this.clientAuthentication = dependencies_1.getClientAuthenticationWithDependencies({});\n    }\n\n    if (sessionOptions.sessionInfo) {\n      this.info = {\n        sessionId: sessionOptions.sessionInfo.sessionId,\n        isLoggedIn: false,\n        webId: sessionOptions.sessionInfo.webId\n      };\n    } else {\n      this.info = {\n        sessionId: sessionId !== null && sessionId !== void 0 ? sessionId : uuid_1.v4(),\n        isLoggedIn: false\n      };\n    }\n\n    iframe_1.setupIframeListener(async redirectUrl => {\n      const sessionInfo = await this.clientAuthentication.handleIncomingRedirect(redirectUrl);\n\n      if (!isLoggedIn(sessionInfo)) {\n        return;\n      }\n\n      this.setSessionInfo(sessionInfo);\n    });\n    this.on(\"tokenRenewal\", () => silentlyAuthenticate(this.info.sessionId, this.clientAuthentication, {\n      inIframe: true\n    }));\n  }\n\n  onLogin(callback) {\n    this.on(\"login\", callback);\n  }\n\n  onLogout(callback) {\n    this.on(\"logout\", callback);\n  }\n\n  onSessionRestore(callback) {\n    this.on(\"sessionRestore\", callback);\n  }\n\n  setSessionInfo(sessionInfo) {\n    this.info.isLoggedIn = sessionInfo.isLoggedIn;\n    this.info.webId = sessionInfo.webId;\n    this.info.sessionId = sessionInfo.sessionId;\n    this.info.expirationDate = sessionInfo.expirationDate;\n\n    if (typeof sessionInfo.expirationDate === \"number\") {\n      setTimeout(async () => {\n        await this.logout();\n      }, sessionInfo.expirationDate - Date.now());\n    }\n  }\n\n}\n\nexports.Session = Session;","map":{"version":3,"sources":["../src/Session.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Session = exports.silentlyAuthenticate = void 0;\nconst events_1 = require(\"events\");\nconst uuid_1 = require(\"uuid\");\nconst dependencies_1 = require(\"./dependencies\");\nconst constant_1 = require(\"./constant\");\nconst iframe_1 = require(\"./iframe\");\nasync function silentlyAuthenticate(sessionId, clientAuthn, options = {\n    inIframe: false,\n}) {\n    var _a;\n    const storedSessionInfo = await clientAuthn.validateCurrentSession();\n    if (storedSessionInfo !== null) {\n        window.localStorage.setItem(constant_1.KEY_CURRENT_URL, window.location.href);\n        await clientAuthn.login({\n            sessionId,\n            prompt: \"none\",\n            oidcIssuer: storedSessionInfo.issuer,\n            redirectUrl: storedSessionInfo.redirectUrl,\n            clientId: storedSessionInfo.clientAppId,\n            clientSecret: storedSessionInfo.clientAppSecret,\n            tokenType: (_a = storedSessionInfo.tokenType) !== null && _a !== void 0 ? _a : \"DPoP\",\n            inIframe: options.inIframe,\n        });\n        return true;\n    }\n    return false;\n}\nexports.silentlyAuthenticate = silentlyAuthenticate;\nfunction isLoggedIn(sessionInfo) {\n    return !!(sessionInfo === null || sessionInfo === void 0 ? void 0 : sessionInfo.isLoggedIn);\n}\nclass Session extends events_1.EventEmitter {\n    constructor(sessionOptions = {}, sessionId) {\n        super();\n        this.tokenRequestInProgress = false;\n        this.tmpFetchWithCookies = false;\n        this.login = async (options) => {\n            var _a;\n            await this.clientAuthentication.login({\n                sessionId: this.info.sessionId,\n                ...options,\n                tokenType: (_a = options.tokenType) !== null && _a !== void 0 ? _a : \"DPoP\",\n            });\n            return new Promise(() => undefined);\n        };\n        this.fetch = async (url, init) => {\n            return this.clientAuthentication.fetch(url, {\n                ...init,\n                credentials: this.tmpFetchWithCookies\n                    ?\n                        \"include\"\n                    :\n                        init === null || init === void 0 ? void 0 : init.credentials,\n            });\n        };\n        this.logout = async () => {\n            await this.clientAuthentication.logout(this.info.sessionId);\n            this.info.isLoggedIn = false;\n            this.tmpFetchWithCookies = false;\n            this.emit(\"logout\");\n        };\n        this.handleIncomingRedirect = async (inputOptions = {}) => {\n            var _a;\n            if (this.info.isLoggedIn) {\n                return this.info;\n            }\n            if (this.tokenRequestInProgress) {\n                return undefined;\n            }\n            const options = typeof inputOptions === \"string\" ? { url: inputOptions } : inputOptions;\n            const url = (_a = options.url) !== null && _a !== void 0 ? _a : window.location.href;\n            if (window.frameElement !== null) {\n                iframe_1.postRedirectUrlToParent(url);\n                return undefined;\n            }\n            if (options.useEssSession !== true ||\n                options.restorePreviousSession === true) {\n                window.localStorage.setItem(\"tmp-resource-server-session-enabled\", \"false\");\n            }\n            else {\n                window.localStorage.setItem(\"tmp-resource-server-session-enabled\", \"true\");\n            }\n            const storedSessionCookieReference = window.localStorage.getItem(\"tmp-resource-server-session-info\");\n            if (typeof storedSessionCookieReference === \"string\" &&\n                options.restorePreviousSession !== true &&\n                options.useEssSession === true) {\n                function isValidSessionCookieReference(reference) {\n                    var _a;\n                    const resourceServers = Object.keys((_a = reference.sessions) !== null && _a !== void 0 ? _a : {});\n                    return (typeof reference.webId === \"string\" &&\n                        resourceServers.length > 0 &&\n                        typeof reference.sessions[resourceServers[0]].expiration === \"number\");\n                }\n                const reference = JSON.parse(storedSessionCookieReference);\n                if (isValidSessionCookieReference(reference)) {\n                    const resourceServers = Object.keys(reference.sessions);\n                    const webIdOrigin = new URL(reference.webId).hostname;\n                    const ownResourceServer = resourceServers.find((resourceServer) => {\n                        return new URL(resourceServer).hostname === webIdOrigin;\n                    });\n                    const relevantServer = ownResourceServer !== null && ownResourceServer !== void 0 ? ownResourceServer : resourceServers[0];\n                    if (reference.sessions[relevantServer].expiration - Date.now() >\n                        5 * 60 * 1000) {\n                        this.info.isLoggedIn = true;\n                        this.info.webId = reference.webId;\n                        this.tmpFetchWithCookies = true;\n                        return this.info;\n                    }\n                }\n            }\n            this.tokenRequestInProgress = true;\n            const sessionInfo = await this.clientAuthentication.handleIncomingRedirect(url);\n            if (isLoggedIn(sessionInfo)) {\n                this.setSessionInfo(sessionInfo);\n                const currentUrl = window.localStorage.getItem(constant_1.KEY_CURRENT_URL);\n                if (currentUrl === null) {\n                    this.emit(\"login\");\n                }\n                else {\n                    window.localStorage.removeItem(constant_1.KEY_CURRENT_URL);\n                    this.emit(\"sessionRestore\", currentUrl);\n                }\n            }\n            else if (options.restorePreviousSession === true) {\n                const storedSessionId = window.localStorage.getItem(constant_1.KEY_CURRENT_SESSION);\n                if (storedSessionId !== null) {\n                    const attemptedSilentAuthentication = await silentlyAuthenticate(storedSessionId, this.clientAuthentication);\n                    if (attemptedSilentAuthentication) {\n                        return new Promise(() => { });\n                    }\n                }\n            }\n            this.tokenRequestInProgress = false;\n            return sessionInfo;\n        };\n        if (sessionOptions.clientAuthentication) {\n            this.clientAuthentication = sessionOptions.clientAuthentication;\n        }\n        else if (sessionOptions.secureStorage && sessionOptions.insecureStorage) {\n            this.clientAuthentication = dependencies_1.getClientAuthenticationWithDependencies({\n                secureStorage: sessionOptions.secureStorage,\n                insecureStorage: sessionOptions.insecureStorage,\n            });\n        }\n        else {\n            this.clientAuthentication = dependencies_1.getClientAuthenticationWithDependencies({});\n        }\n        if (sessionOptions.sessionInfo) {\n            this.info = {\n                sessionId: sessionOptions.sessionInfo.sessionId,\n                isLoggedIn: false,\n                webId: sessionOptions.sessionInfo.webId,\n            };\n        }\n        else {\n            this.info = {\n                sessionId: sessionId !== null && sessionId !== void 0 ? sessionId : uuid_1.v4(),\n                isLoggedIn: false,\n            };\n        }\n        iframe_1.setupIframeListener(async (redirectUrl) => {\n            const sessionInfo = await this.clientAuthentication.handleIncomingRedirect(redirectUrl);\n            if (!isLoggedIn(sessionInfo)) {\n                return;\n            }\n            this.setSessionInfo(sessionInfo);\n        });\n        this.on(\"tokenRenewal\", () => silentlyAuthenticate(this.info.sessionId, this.clientAuthentication, {\n            inIframe: true,\n        }));\n    }\n    onLogin(callback) {\n        this.on(\"login\", callback);\n    }\n    onLogout(callback) {\n        this.on(\"logout\", callback);\n    }\n    onSessionRestore(callback) {\n        this.on(\"sessionRestore\", callback);\n    }\n    setSessionInfo(sessionInfo) {\n        this.info.isLoggedIn = sessionInfo.isLoggedIn;\n        this.info.webId = sessionInfo.webId;\n        this.info.sessionId = sessionInfo.sessionId;\n        this.info.expirationDate = sessionInfo.expirationDate;\n        if (typeof sessionInfo.expirationDate === \"number\") {\n            setTimeout(async () => {\n                await this.logout();\n            }, sessionInfo.expirationDate - Date.now());\n        }\n    }\n}\nexports.Session = Session;\n//# sourceMappingURL=Session.js.map"]},"metadata":{},"sourceType":"script"}