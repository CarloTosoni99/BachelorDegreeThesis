{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst InruptError_1 = __importDefault(require(\"../../errors/InruptError\"));\n\nclass AggregateHandler {\n  constructor(handleables) {\n    this.handleables = handleables;\n  }\n\n  async getProperHandler(params) {\n    const canHandleList = await Promise.all(this.handleables.map(handleable => handleable.canHandle(...params)));\n\n    for (let i = 0; i < canHandleList.length; i += 1) {\n      if (canHandleList[i]) {\n        return this.handleables[i];\n      }\n    }\n\n    return null;\n  }\n\n  async canHandle(...params) {\n    return (await this.getProperHandler(params)) !== null;\n  }\n\n  async handle(...params) {\n    const handler = await this.getProperHandler(params);\n\n    if (handler) {\n      return handler.handle(...params);\n    }\n\n    throw new InruptError_1.default(`[${this.constructor.name}] cannot find a suitable handler for: ${params.map(param => {\n      try {\n        return JSON.stringify(param);\n      } catch (err) {\n        return param.toString();\n      }\n    }).join(\", \")}`);\n  }\n\n}\n\nexports.default = AggregateHandler;","map":{"version":3,"sources":["../../../src/util/handlerPattern/AggregateHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;AA8BA,MAAA,aAAA,GAAA,eAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;AAKA,MAAqB,gBAArB,CAAqC;AAGnC,EAAA,WAAA,CAAoB,WAApB,EAAoD;AAAhC,SAAA,WAAA,GAAA,WAAA;AAAoC;;AAO1B,QAAhB,gBAAgB,CAAC,MAAD,EAAU;AAsBtC,UAAM,aAAa,GAAG,MAAM,OAAO,CAAC,GAAR,CAC1B,KAAK,WAAL,CAAiB,GAAjB,CAAsB,UAAD,IAAgB,UAAU,CAAC,SAAX,CAAqB,GAAG,MAAxB,CAArC,CAD0B,CAA5B;;AAIA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,aAAa,CAAC,MAAlC,EAA0C,CAAC,IAAI,CAA/C,EAAkD;AAChD,UAAI,aAAa,CAAC,CAAD,CAAjB,EAAsB;AACpB,eAAO,KAAK,WAAL,CAAiB,CAAjB,CAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AAEc,QAAT,SAAS,CAAC,GAAG,MAAJ,EAAa;AAC1B,WAAO,CAAC,MAAM,KAAK,gBAAL,CAAsB,MAAtB,CAAP,MAA0C,IAAjD;AACD;;AAEW,QAAN,MAAM,CAAC,GAAG,MAAJ,EAAa;AACvB,UAAM,OAAO,GAAG,MAAM,KAAK,gBAAL,CAAsB,MAAtB,CAAtB;;AACA,QAAI,OAAJ,EAAa;AACX,aAAO,OAAO,CAAC,MAAR,CAAe,GAAG,MAAlB,CAAP;AACD;;AAED,UAAM,IAAI,aAAA,CAAA,OAAJ,CACJ,IAAI,KAAK,WAAL,CAAiB,IAAI,yCAAyC,MAAM,CACrE,GAD+D,CAC1D,KAAD,IAAU;AACb,UAAI;AACF,eAAO,IAAI,CAAC,SAAL,CAAe,KAAf,CAAP;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AAEZ,eAAQ,KAAa,CAAC,QAAd,EAAR;AACD;AACF,KAR+D,EAS/D,IAT+D,CAS1D,IAT0D,CASrD,EAVT,CAAN;AAYD;;AAlEkC;;AAArC,OAAA,CAAA,OAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst InruptError_1 = __importDefault(require(\"../../errors/InruptError\"));\nclass AggregateHandler {\n    constructor(handleables) {\n        this.handleables = handleables;\n    }\n    async getProperHandler(params) {\n        const canHandleList = await Promise.all(this.handleables.map((handleable) => handleable.canHandle(...params)));\n        for (let i = 0; i < canHandleList.length; i += 1) {\n            if (canHandleList[i]) {\n                return this.handleables[i];\n            }\n        }\n        return null;\n    }\n    async canHandle(...params) {\n        return (await this.getProperHandler(params)) !== null;\n    }\n    async handle(...params) {\n        const handler = await this.getProperHandler(params);\n        if (handler) {\n            return handler.handle(...params);\n        }\n        throw new InruptError_1.default(`[${this.constructor.name}] cannot find a suitable handler for: ${params\n            .map((param) => {\n            try {\n                return JSON.stringify(param);\n            }\n            catch (err) {\n                return param.toString();\n            }\n        })\n            .join(\", \")}`);\n    }\n}\nexports.default = AggregateHandler;\n//# sourceMappingURL=AggregateHandler.js.map"]},"metadata":{},"sourceType":"script"}