{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass InruptError extends Error {\n  constructor(messageOrIri, messageParams, appendErrorIri = true) {\n    super(typeof messageOrIri === \"string\" ? InruptError.substituteParams(messageOrIri, messageParams) : InruptError.appendErrorIri(InruptError.lookupErrorIri(messageOrIri, messageParams), messageOrIri, appendErrorIri));\n  }\n\n  httpResponse(httpErrorResponse, appendHttpDetails = true) {\n    this.message = InruptError.appendHttpResponseDetails(this.message, httpErrorResponse, appendHttpDetails);\n    this.httpErrorResponse = httpErrorResponse;\n    return this;\n  }\n\n  hasHttpResponse() {\n    return this.httpErrorResponse !== undefined;\n  }\n\n  getHttpResponse() {\n    return this.httpErrorResponse;\n  }\n\n  getHttpStatusCode() {\n    if (this.httpErrorResponse === undefined) {\n      throw new InruptError(\"This InruptError was not provided with a HTTP response - so we can't get its HTTP Status Code.\");\n    }\n\n    return this.httpErrorResponse.status;\n  }\n\n  getHttpStatusText() {\n    if (this.httpErrorResponse === undefined) {\n      throw new InruptError(\"This InruptError was not provided with a HTTP response - so we can't get its HTTP Status Text!\");\n    }\n\n    return this.httpErrorResponse.statusText;\n  }\n\n  static determineIfVocabTerm(value) {\n    if (value.strict !== undefined) {\n      return true;\n    }\n\n    return false;\n  }\n\n  static lookupErrorIri(iri, messageParams) {\n    if (InruptError.determineIfVocabTerm(iri)) {\n      const message = messageParams === undefined ? iri.message : iri.messageParams(...messageParams);\n      return message === undefined ? `Looked up error message IRI [${iri.value}], but found no message value.` : message;\n    }\n\n    return `Error message looked up at: [${iri.value}]${messageParams === undefined ? \"\" : `, with params [${messageParams.toString()}]`}`;\n  }\n\n  static appendHttpResponseDetails(message, response, append) {\n    if (append && typeof response !== \"undefined\") {\n      return `${message} HTTP details: status code [${response.status}], status text [${response.statusText}].`;\n    }\n\n    return message;\n  }\n\n  static appendErrorIri(message, iri, append) {\n    return append ? `${message} Error IRI: [${iri.value}].` : message;\n  }\n\n  static substituteParams(message, params) {\n    let fullMessage = message;\n\n    if (params !== undefined) {\n      const paramsRequired = message.split(\"{{\").length - 1;\n\n      if (paramsRequired !== params.length) {\n        throw new Error(`Setting parameters on message [${message}], but it requires [${paramsRequired}] params and we received [${params.length}].`);\n      }\n\n      for (let i = 0; i < params.length; i += 1) {\n        const marker = `{{${i}}}`;\n        fullMessage = fullMessage.replace(marker, params[i]);\n      }\n    }\n\n    return fullMessage;\n  }\n\n}\n\nexports.default = InruptError;","map":{"version":3,"sources":["../../src/errors/InruptError.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass InruptError extends Error {\n    constructor(messageOrIri, messageParams, appendErrorIri = true) {\n        super(typeof messageOrIri === \"string\"\n            ? InruptError.substituteParams(messageOrIri, messageParams)\n            : InruptError.appendErrorIri(InruptError.lookupErrorIri(messageOrIri, messageParams), messageOrIri, appendErrorIri));\n    }\n    httpResponse(httpErrorResponse, appendHttpDetails = true) {\n        this.message = InruptError.appendHttpResponseDetails(this.message, httpErrorResponse, appendHttpDetails);\n        this.httpErrorResponse = httpErrorResponse;\n        return this;\n    }\n    hasHttpResponse() {\n        return this.httpErrorResponse !== undefined;\n    }\n    getHttpResponse() {\n        return this.httpErrorResponse;\n    }\n    getHttpStatusCode() {\n        if (this.httpErrorResponse === undefined) {\n            throw new InruptError(\"This InruptError was not provided with a HTTP response - so we can't get its HTTP Status Code.\");\n        }\n        return this.httpErrorResponse.status;\n    }\n    getHttpStatusText() {\n        if (this.httpErrorResponse === undefined) {\n            throw new InruptError(\"This InruptError was not provided with a HTTP response - so we can't get its HTTP Status Text!\");\n        }\n        return this.httpErrorResponse.statusText;\n    }\n    static determineIfVocabTerm(value) {\n        if (value.strict !== undefined) {\n            return true;\n        }\n        return false;\n    }\n    static lookupErrorIri(iri, messageParams) {\n        if (InruptError.determineIfVocabTerm(iri)) {\n            const message = messageParams === undefined\n                ? iri.message\n                : iri.messageParams(...messageParams);\n            return message === undefined\n                ? `Looked up error message IRI [${iri.value}], but found no message value.`\n                : message;\n        }\n        return `Error message looked up at: [${iri.value}]${messageParams === undefined\n            ? \"\"\n            : `, with params [${messageParams.toString()}]`}`;\n    }\n    static appendHttpResponseDetails(message, response, append) {\n        if (append && typeof response !== \"undefined\") {\n            return `${message} HTTP details: status code [${response.status}], status text [${response.statusText}].`;\n        }\n        return message;\n    }\n    static appendErrorIri(message, iri, append) {\n        return append ? `${message} Error IRI: [${iri.value}].` : message;\n    }\n    static substituteParams(message, params) {\n        let fullMessage = message;\n        if (params !== undefined) {\n            const paramsRequired = message.split(\"{{\").length - 1;\n            if (paramsRequired !== params.length) {\n                throw new Error(`Setting parameters on message [${message}], but it requires [${paramsRequired}] params and we received [${params.length}].`);\n            }\n            for (let i = 0; i < params.length; i += 1) {\n                const marker = `{{${i}}}`;\n                fullMessage = fullMessage.replace(marker, params[i]);\n            }\n        }\n        return fullMessage;\n    }\n}\nexports.default = InruptError;\n//# sourceMappingURL=InruptError.js.map"]},"metadata":{},"sourceType":"script"}