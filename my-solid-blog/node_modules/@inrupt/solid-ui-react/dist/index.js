(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("@inrupt/solid-client");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("@inrupt/solid-client-authn-browser");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("react-table");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("swr");

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "Image", function() { return /* reexport */ Image; });
__webpack_require__.d(__webpack_exports__, "Link", function() { return /* reexport */ Link; });
__webpack_require__.d(__webpack_exports__, "LoginButton", function() { return /* reexport */ LoginButton; });
__webpack_require__.d(__webpack_exports__, "LogoutButton", function() { return /* reexport */ LogoutButton; });
__webpack_require__.d(__webpack_exports__, "Table", function() { return /* reexport */ Table; });
__webpack_require__.d(__webpack_exports__, "TableColumn", function() { return /* reexport */ TableColumn; });
__webpack_require__.d(__webpack_exports__, "Text", function() { return /* reexport */ Text; });
__webpack_require__.d(__webpack_exports__, "Value", function() { return /* reexport */ Value; });
__webpack_require__.d(__webpack_exports__, "Video", function() { return /* reexport */ Video; });
__webpack_require__.d(__webpack_exports__, "SessionContext", function() { return /* reexport */ SessionContext; });
__webpack_require__.d(__webpack_exports__, "SessionProvider", function() { return /* reexport */ SessionProvider; });
__webpack_require__.d(__webpack_exports__, "CombinedDataProvider", function() { return /* reexport */ combinedDataContext; });
__webpack_require__.d(__webpack_exports__, "ThingContext", function() { return /* reexport */ thingContext; });
__webpack_require__.d(__webpack_exports__, "ThingProvider", function() { return /* reexport */ ThingProvider; });
__webpack_require__.d(__webpack_exports__, "DatasetContext", function() { return /* reexport */ datasetContext; });
__webpack_require__.d(__webpack_exports__, "DatasetProvider", function() { return /* reexport */ DatasetProvider; });
__webpack_require__.d(__webpack_exports__, "useSession", function() { return /* reexport */ useSession; });
__webpack_require__.d(__webpack_exports__, "useDataset", function() { return /* reexport */ useDataset; });
__webpack_require__.d(__webpack_exports__, "useThing", function() { return /* reexport */ useThing; });

// EXTERNAL MODULE: external "react"
var external_react_ = __webpack_require__(0);
var external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);

// EXTERNAL MODULE: external "@inrupt/solid-client"
var solid_client_ = __webpack_require__(1);

// EXTERNAL MODULE: external "swr"
var external_swr_ = __webpack_require__(4);
var external_swr_default = /*#__PURE__*/__webpack_require__.n(external_swr_);

// EXTERNAL MODULE: external "@inrupt/solid-client-authn-browser"
var solid_client_authn_browser_ = __webpack_require__(2);

// CONCATENATED MODULE: ./src/context/sessionContext/index.tsx
/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


const SessionContext = Object(external_react_["createContext"])({
    login: solid_client_authn_browser_["login"],
    logout: solid_client_authn_browser_["logout"],
    fetch: solid_client_authn_browser_["fetch"],
    session: Object(solid_client_authn_browser_["getDefaultSession"])(),
    sessionRequestInProgress: true,
});
/**
 * Used to provide session data to child components through context, as used by various provided components and the useSession hook.
 */
const SessionProvider = ({ sessionId, children, onError, sessionRequestInProgress: defaultSessionRequestInProgress, restorePreviousSession, onSessionRestore, }) => {
    const [session, setSession] = Object(external_react_["useState"])(Object(solid_client_authn_browser_["getDefaultSession"])());
    let restoreSession = restorePreviousSession;
    if (onSessionRestore !== undefined) {
        Object(solid_client_authn_browser_["onSessionRestore"])(onSessionRestore);
        restoreSession = true;
    }
    const defaultInProgress = typeof defaultSessionRequestInProgress === "undefined"
        ? !session.info.isLoggedIn
        : defaultSessionRequestInProgress;
    // If loggedin is true, we're not making a session request.
    const [sessionRequestInProgress, setSessionRequestInProgress] = Object(external_react_["useState"])(defaultInProgress);
    let currentLocation;
    if (typeof window !== "undefined") {
        currentLocation = window.location;
    }
    Object(external_react_["useEffect"])(() => {
        Object(solid_client_authn_browser_["handleIncomingRedirect"])({
            url: window.location.href,
            restorePreviousSession: restoreSession,
        })
            .catch((error) => {
            if (onError) {
                onError(error);
            }
            else {
                throw error;
            }
        })
            .finally(() => {
            // console.log("done");
            setSessionRequestInProgress(false);
        });
        Object(solid_client_authn_browser_["getDefaultSession"])().on("logout", () => {
            // TODO force a refresh
            setSession(Object(solid_client_authn_browser_["getDefaultSession"])());
        });
    }, [session, sessionId, onError, currentLocation, restoreSession]);
    const contextLogin = async (options) => {
        setSessionRequestInProgress(true);
        try {
            await Object(solid_client_authn_browser_["login"])(options);
        }
        catch (error) {
            if (onError) {
                onError(error);
            }
            else {
                throw error;
            }
        }
        finally {
            setSessionRequestInProgress(false);
        }
    };
    const contextLogout = async () => {
        try {
            await Object(solid_client_authn_browser_["logout"])();
        }
        catch (error) {
            if (onError) {
                onError(error);
            }
            else {
                throw error;
            }
        }
    };
    return (external_react_default.a.createElement(SessionContext.Provider, { value: {
            session,
            login: contextLogin,
            logout: contextLogout,
            sessionRequestInProgress,
            setSessionRequestInProgress,
            fetch: solid_client_authn_browser_["fetch"],
        } }, children));
};

// CONCATENATED MODULE: ./src/hooks/useDataset/index.tsx
/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */





function useDataset(datasetIri, 
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
options) {
    const { fetch } = Object(external_react_["useContext"])(SessionContext);
    const { solidDataset: datasetFromContext } = Object(external_react_["useContext"])(datasetContext);
    const { data, error } = external_swr_default()(datasetIri ? [datasetIri, options, fetch] : null, () => {
        const requestOptions = Object.assign({ fetch }, options);
        // useSWR will only call this fetcher if datasetUri is defined
        return Object(solid_client_["getSolidDataset"])(datasetIri, requestOptions);
    });
    const dataset = datasetIri ? data : datasetFromContext;
    return { dataset, error };
}

// CONCATENATED MODULE: ./src/context/datasetContext/index.tsx
/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


const DatasetContext = Object(external_react_["createContext"])({
    solidDataset: undefined,
    setDataset: () => { },
});
/* harmony default export */ var datasetContext = (DatasetContext);
/**
 * Used to provide a [Dataset](https://docs.inrupt.com/developer-tools/javascript/client-libraries/reference/glossary/#term-SolidDataset) to child components through context, as used by various provided components and the useDataset hook.
 */
const DatasetProvider = ({ children, onError, solidDataset: propDataset, datasetUrl, loading, }) => {
    const { dataset, error } = useDataset(datasetUrl);
    if (error && onError) {
        onError(error);
    }
    const datasetToUse = propDataset !== null && propDataset !== void 0 ? propDataset : dataset;
    // Provide a setDataset function so that child components can update.
    const [stateDataset, setDataset] = Object(external_react_["useState"])(datasetToUse);
    // If the dataset is asynchronously loaded, make sure to set the new state value.
    Object(external_react_["useEffect"])(() => {
        setDataset(datasetToUse);
    }, [datasetToUse]);
    return (external_react_default.a.createElement(DatasetContext.Provider, { value: { solidDataset: stateDataset, setDataset } }, stateDataset ? children : loading || external_react_default.a.createElement("span", null, "Fetching data...")));
};

// CONCATENATED MODULE: ./src/context/thingContext/index.tsx
/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */



const ThingContext = Object(external_react_["createContext"])({
    thing: null,
    setThing: () => { },
});
/* harmony default export */ var thingContext = (ThingContext);
/**
 * Used to provide a Thing to child components through context, as used by various provided components and the useThing hook.
 */
const ThingProvider = ({ children, thing: propThing, thingUrl, }) => {
    const { solidDataset } = Object(external_react_["useContext"])(datasetContext);
    let thing = propThing;
    if (solidDataset && thingUrl) {
        thing = Object(solid_client_["getThing"])(solidDataset, thingUrl);
    }
    // Allow child components to update the thing
    const [stateThing, setThing] = Object(external_react_["useState"])(thing || null);
    // Reset the thing if the dataset changes.
    Object(external_react_["useEffect"])(() => {
        if (solidDataset && thingUrl) {
            setThing(Object(solid_client_["getThing"])(solidDataset, thingUrl));
        }
        else if (propThing) {
            setThing(propThing);
        }
    }, [solidDataset, thingUrl, propThing]);
    return (external_react_default.a.createElement(ThingContext.Provider, { value: { thing: stateThing, setThing } }, children));
};

// CONCATENATED MODULE: ./src/helpers/index.ts
/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */




const overwriteFile = async (src, file, input, fetch, maxSize, onSave, onError) => {
    try {
        if (maxSize !== undefined && file.size > maxSize * 1024) {
            input.setCustomValidity(`The selected file must not be larger than ${maxSize}kB`);
            input.reportValidity();
            return null;
        }
        input.setCustomValidity("");
        await Object(solid_client_["overwriteFile"])(src, file, { fetch });
        if (onSave) {
            onSave();
        }
        const objectUrl = URL.createObjectURL(file);
        return objectUrl;
    }
    catch (error) {
        if (onError) {
            onError(error);
        }
        return null;
    }
};
const retrieveFile = async (src, fetch) => {
    const imageBlob = await Object(solid_client_["getFile"])(src, { fetch });
    return URL.createObjectURL(imageBlob);
};
function getValueByType(type, thing, property, locale) {
    switch (type) {
        case "boolean":
            return Object(solid_client_["getBoolean"])(thing, property);
        case "datetime":
            return Object(solid_client_["getDatetime"])(thing, property);
        case "decimal":
            return Object(solid_client_["getDecimal"])(thing, property);
        case "integer":
            return Object(solid_client_["getInteger"])(thing, property);
        case "url":
            return Object(solid_client_["getUrl"])(thing, property);
        default:
            if (locale) {
                return Object(solid_client_["getStringWithLocale"])(thing, property, locale);
            }
            return Object(solid_client_["getStringNoLocale"])(thing, property);
    }
}
function getValueByTypeAll(type, thing, property, locale) {
    switch (type) {
        case "boolean":
            return Object(solid_client_["getBooleanAll"])(thing, property);
        case "datetime":
            return Object(solid_client_["getDatetimeAll"])(thing, property);
        case "decimal":
            return Object(solid_client_["getDecimalAll"])(thing, property);
        case "integer":
            return Object(solid_client_["getIntegerAll"])(thing, property);
        case "url":
            return Object(solid_client_["getUrlAll"])(thing, property);
        default:
            if (locale) {
                return Object(solid_client_["getStringWithLocaleAll"])(thing, property, locale);
            }
            return Object(solid_client_["getStringNoLocaleAll"])(thing, property);
    }
}
function getPropertyForThing(propertySelector, type, thing, properties, locale) {
    return (properties.find((property) => {
        return propertySelector(type, thing, property, locale);
    }) || properties[0]);
}
function useProperty(props) {
    const { dataset: propDataset, thing: propThing, properties: propProperties, property: propProperty, type, locale, } = props;
    const { solidDataset: contextDataset, setDataset = () => { } } = Object(external_react_["useContext"])(datasetContext);
    const dataset = propDataset || contextDataset;
    const { thing: contextThing, setThing = () => { } } = Object(external_react_["useContext"])(thingContext);
    const thing = propThing || contextThing || undefined;
    let error;
    if (!thing) {
        error = new Error("Thing not found as property or in context");
    }
    const property = thing && propProperties
        ? getPropertyForThing(getValueByType, type, thing, propProperties, locale) || propProperties[0]
        : propProperty;
    if (!property) {
        throw new Error("No property provided");
    }
    const value = thing && property ? getValueByType(type, thing, property, locale) : null;
    return {
        dataset,
        thing,
        property,
        error,
        value,
        setDataset,
        setThing,
    };
}
function useDatetimeBrowserSupport() {
    const [isDatetimeSupported, setIsDatetimeSupported] = Object(external_react_["useState"])(null);
    Object(external_react_["useEffect"])(() => {
        const test = document.createElement("input");
        test.type = "datetime-local";
        setIsDatetimeSupported(test.type !== "text");
    }, []);
    return isDatetimeSupported;
}

// CONCATENATED MODULE: ./src/components/image/index.tsx
/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};



/**
 * Fetches and displays an image, from a src found at a given property of a given [Thing](https://docs.inrupt.com/developer-tools/javascript/client-libraries/reference/glossary/#term-Thing). Can also be used to upload a new/replacement image file.
 */
function Image(_a) {
    var { thing: propThing, property: propProperty, properties: propProperties, edit, autosave, onSave, onError, maxSize, alt, inputProps, errorComponent: ErrorComponent } = _a, imgOptions = __rest(_a, ["thing", "property", "properties", "edit", "autosave", "onSave", "onError", "maxSize", "alt", "inputProps", "errorComponent"]);
    const { fetch } = Object(external_react_["useContext"])(SessionContext);
    const values = useProperty({
        thing: propThing,
        property: propProperty,
        properties: propProperties,
        type: "url",
    });
    const { value } = values;
    let { error: thingError } = values;
    if (!edit && !value) {
        thingError = new Error("No value found for property.");
    }
    const [error, setError] = Object(external_react_["useState"])(thingError);
    Object(external_react_["useEffect"])(() => {
        if (error) {
            if (onError) {
                onError(error);
            }
        }
    }, [error, onError, ErrorComponent]);
    const [imgObjectUrl, setImgObjectUrl] = Object(external_react_["useState"])();
    Object(external_react_["useEffect"])(() => {
        if (value) {
            retrieveFile(value, fetch)
                .then(setImgObjectUrl)
                .catch((retrieveError) => {
                setError(retrieveError);
                if (onError) {
                    onError(retrieveError);
                }
                if (ErrorComponent) {
                    setImgObjectUrl("");
                }
            });
        }
    }, [value, onError, setError, fetch, ErrorComponent]);
    const handleChange = async (input) => {
        const fileList = input.files;
        if (autosave && fileList && fileList.length > 0 && value) {
            const newObjectUrl = await overwriteFile(value, fileList[0], input, fetch, maxSize, onSave, onError);
            if (newObjectUrl) {
                setImgObjectUrl(newObjectUrl);
            }
        }
    };
    let imageComponent = null;
    if (error && ErrorComponent) {
        imageComponent = external_react_default.a.createElement(ErrorComponent, { error: error });
    }
    else if (value) {
        /* eslint-disable-next-line react/jsx-props-no-spreading */
        imageComponent = external_react_default.a.createElement("img", Object.assign({ src: imgObjectUrl, alt: alt !== null && alt !== void 0 ? alt : "" }, imgOptions));
    }
    return (external_react_default.a.createElement(external_react_default.a.Fragment, null,
        imageComponent,
        edit && (external_react_default.a.createElement("input", Object.assign({}, inputProps, { type: "file", accept: "image/*", onChange: (e) => handleChange(e.target) })))));
}

// CONCATENATED MODULE: ./src/components/value/index.tsx
/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var value_rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};




/**
 * Retrieves and displays a value of one of a range of types from a given [Dataset](https://docs.inrupt.com/developer-tools/javascript/client-libraries/reference/glossary/#term-SolidDataset)/[Thing](https://docs.inrupt.com/developer-tools/javascript/client-libraries/reference/glossary/#term-Thing)/property. Can also be used to set/update and persist a value.
 */
function Value(_a) {
    var _b, _c, _d;
    var { thing: propThing, solidDataset: propDataset, property: propProperty, properties: propProperties, dataType, saveDatasetTo, locale, onSave, onError, edit, autosave, inputProps } = _a, other = value_rest(_a, ["thing", "solidDataset", "property", "properties", "dataType", "saveDatasetTo", "locale", "onSave", "onError", "edit", "autosave", "inputProps"]);
    const { fetch } = Object(external_react_["useContext"])(SessionContext);
    const { value: thingValue, thing, property, dataset, setDataset, error, } = useProperty({
        dataset: propDataset,
        thing: propThing,
        property: propProperty,
        properties: propProperties,
        type: dataType,
        locale,
    });
    const isDatetimeSupported = useDatetimeBrowserSupport();
    Object(external_react_["useEffect"])(() => {
        if (error && onError) {
            onError(error);
        }
    }, [error, onError]);
    let formattedValue = thingValue;
    let initialBooleanValue = false;
    if (dataType === "boolean") {
        initialBooleanValue = (_b = thingValue) !== null && _b !== void 0 ? _b : false;
        formattedValue = initialBooleanValue.toString();
    }
    else if (dataType === "datetime") {
        formattedValue = thingValue
            ? thingValue
                .toISOString()
                .substring(0, thingValue.toISOString().length - 5)
            : null;
    }
    else if (dataType !== "string") {
        formattedValue = (_c = thingValue === null || thingValue === void 0 ? void 0 : thingValue.toString()) !== null && _c !== void 0 ? _c : "";
    }
    const [value, setValue] = Object(external_react_["useState"])(formattedValue);
    const [booleanValue, setBooleanValue] = Object(external_react_["useState"])(initialBooleanValue);
    Object(external_react_["useEffect"])(() => {
        if (dataType === "boolean") {
            setValue(booleanValue.toString());
        }
    }, [booleanValue, dataType]);
    let initialDateValue = "";
    if (dataType === "datetime" &&
        !isDatetimeSupported &&
        typeof value === "string") {
        initialDateValue = value === null || value === void 0 ? void 0 : value.split(/T(.+)/)[0].toString();
    }
    let initialTimeValue = "00:00";
    if (dataType === "datetime" &&
        !isDatetimeSupported &&
        typeof value === "string") {
        initialTimeValue = (_d = value === null || value === void 0 ? void 0 : value.split(/T(.+)/)[1]) === null || _d === void 0 ? void 0 : _d.toString();
    }
    const [time, setTime] = Object(external_react_["useState"])(initialTimeValue);
    const [date, setDate] = Object(external_react_["useState"])(initialDateValue);
    Object(external_react_["useEffect"])(() => {
        if ((!time && !date) || dataType !== "datetime")
            return;
        setValue(`${date !== null && date !== void 0 ? date : ""}T${time !== null && time !== void 0 ? time : "00:00"}`);
    }, [time, date, dataType]);
    /* Save Value value in the pod */
    const saveHandler = async (e) => {
        if (formattedValue !== value &&
            thing &&
            dataset &&
            e.target.reportValidity()) {
            let updatedResource = thing;
            const datetimeValue = value;
            switch (dataType) {
                case "boolean":
                    updatedResource = Object(solid_client_["setBoolean"])(thing, property, booleanValue);
                    break;
                case "datetime":
                    updatedResource = Object(solid_client_["setDatetime"])(thing, property, new Date(`${datetimeValue}Z`));
                    break;
                case "decimal": {
                    updatedResource = Object(solid_client_["setDecimal"])(thing, property, parseFloat(value));
                    break;
                }
                case "integer": {
                    updatedResource = Object(solid_client_["setInteger"])(thing, property, parseInt(value, 10));
                    break;
                }
                case "url":
                    updatedResource = Object(solid_client_["setUrl"])(thing, property, value);
                    break;
                default:
                    if (locale) {
                        updatedResource = Object(solid_client_["setStringWithLocale"])(thing, property, value, locale);
                    }
                    else {
                        updatedResource = Object(solid_client_["setStringNoLocale"])(thing, property, value);
                    }
            }
            try {
                let savedDataset;
                if (saveDatasetTo) {
                    savedDataset = await Object(solid_client_["saveSolidDatasetAt"])(saveDatasetTo, Object(solid_client_["setThing"])(dataset, updatedResource), { fetch });
                    setDataset(savedDataset);
                }
                else if (Object(solid_client_["hasResourceInfo"])(dataset)) {
                    savedDataset = await Object(solid_client_["saveSolidDatasetAt"])(Object(solid_client_["getSourceUrl"])(dataset), Object(solid_client_["setThing"])(dataset, updatedResource), { fetch });
                    setDataset(savedDataset);
                }
                else if (onError) {
                    onError(new Error("Please provide saveDatasetTo location for new data"));
                }
                if (!error && onSave) {
                    onSave(savedDataset, updatedResource);
                }
            }
            catch (saveError) {
                if (onError) {
                    onError(saveError);
                }
            }
        }
    };
    if (!dataset && !thing) {
        // TODO: provide option for user to pass in loader
        return external_react_default.a.createElement("span", null, "fetching data in progress");
    }
    let inputType;
    let inputStep;
    switch (dataType) {
        case "boolean":
            inputType = "checkbox";
            break;
        case "datetime":
            inputType = isDatetimeSupported
                ? "datetime-local"
                : "datetime-workaround";
            inputStep = "any";
            break;
        case "decimal":
            inputType = "number";
            inputStep = "any";
            break;
        case "integer":
            inputType = "number";
            break;
        case "url":
            inputType = "url";
            break;
        default:
            inputType = "text";
    }
    return (external_react_default.a.createElement(external_react_default.a.Fragment, null,
        // eslint-disable-next-line react/jsx-props-no-spreading
        !edit && dataset && thing && external_react_default.a.createElement("span", Object.assign({}, other), `${value}`),
        edit && dataset && thing && inputType !== "datetime-workaround" && (external_react_default.a.createElement("input", Object.assign({ type: inputType, checked: booleanValue, step: inputStep }, inputProps, { onChange: (e) => {
                if (dataType === "boolean") {
                    setBooleanValue(e.target.checked);
                }
                else {
                    setValue(e.target.value);
                }
            }, onBlur: (e) => autosave && saveHandler(e), value: value, pattern: dataType === "datetime"
                ? "[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}"
                : undefined, placeholder: dataType === "datetime" ? "yyyy-mm-ddThh:mm" : undefined }))),
        edit && dataset && thing && inputType === "datetime-workaround" && (external_react_default.a.createElement(external_react_default.a.Fragment, null,
            external_react_default.a.createElement("input", Object.assign({ type: "date", "aria-label": "Date", step: inputStep }, inputProps, { onChange: (e) => {
                    setDate(e.target.value);
                }, onBlur: (e) => autosave && saveHandler(e), value: date, pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}", placeholder: "yyyy-mm-dd" })),
            external_react_default.a.createElement("input", { type: "time", "aria-label": "Time", value: time, onChange: (e) => setTime(e.target.value), onBlur: (e) => autosave && saveHandler(e), pattern: "[0-9]{2}:[0-9]{2}" })))));
}
Value.defaultProps = {
    autosave: false,
    edit: false,
};

// CONCATENATED MODULE: ./src/components/link/index.tsx
/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var link_rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};



/**
 * Retrieves a URL from given [Thing](https://docs.inrupt.com/developer-tools/javascript/client-libraries/reference/glossary/#term-Thing)/property, and renders as an anchor tag with the given href.
 */
function Link(_a) {
    var { children, property: propProperty, properties: propProperties, thing: propThing, solidDataset, autosave, rel, target, edit, onSave, onError } = _a, linkOptions = link_rest(_a, ["children", "property", "properties", "thing", "solidDataset", "autosave", "rel", "target", "edit", "onSave", "onError"]);
    const { value: href, thing, property, dataset } = useProperty({
        dataset: solidDataset,
        thing: propThing,
        property: propProperty,
        properties: propProperties,
        type: "url",
    });
    const adjustedRel = rel || (target === "_blank" ? "noopener noreferrer" : "nofollow");
    if (!href) {
        throw new Error("URL not found for given property");
    }
    if (edit) {
        return (external_react_default.a.createElement(Value, { dataType: "url", solidDataset: dataset, thing: thing, property: property, autosave: autosave, onSave: onSave, onError: onError, edit: true }));
    }
    return (
    // eslint-disable-next-line react/jsx-props-no-spreading
    external_react_default.a.createElement("a", Object.assign({ href: href, rel: adjustedRel, target: target }, linkOptions), children !== null && children !== void 0 ? children : href));
}

// CONCATENATED MODULE: ./src/components/logIn/index.tsx
/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * Displays a button which triggers the login flow on click. Should be used inside a `SessionProvider`.
 */
const LoginButton = (propsLogin) => {
    const { oidcIssuer, redirectUrl, children, authOptions, onError, } = propsLogin;
    const options = Object.assign({ redirectUrl,
        oidcIssuer }, authOptions);
    const { login, setSessionRequestInProgress } = Object(external_react_["useContext"])(SessionContext);
    async function loginHandler() {
        setSessionRequestInProgress(true);
        try {
            // Workaround for a solid-client-authn bug.
            // Typescript is mad about something.
            await login(options);
            setSessionRequestInProgress(false);
        }
        catch (error) {
            setSessionRequestInProgress(false);
            if (onError)
                onError(error);
        }
    }
    function keyDownHandler(e) {
        return e.key === "Enter" ? loginHandler() : Promise.resolve();
    }
    return children ? (external_react_default.a.createElement("div", { role: "button", tabIndex: 0, onClick: loginHandler, onKeyDown: keyDownHandler }, children)) : (external_react_default.a.createElement("button", { type: "button", onClick: loginHandler, onKeyDown: keyDownHandler }, "Log In"));
};

// CONCATENATED MODULE: ./src/components/logOut/index.tsx
/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * Renders a button which triggers logout on click. Should be used within a `SessionProvider`.
 */
const LogoutButton = (propsLogout) => {
    const { logout } = Object(external_react_["useContext"])(SessionContext);
    const { children, onLogout, onError } = propsLogout;
    async function logoutHandler() {
        try {
            await logout();
            if (onLogout)
                onLogout();
        }
        catch (error) {
            if (onError)
                onError(error);
        }
    }
    function keyDownHandler(e) {
        return e.key === "Enter" ? logoutHandler() : Promise.resolve();
    }
    return children ? (external_react_default.a.createElement("div", { role: "button", tabIndex: 0, onClick: logoutHandler, onKeyDown: keyDownHandler }, children)) : (external_react_default.a.createElement("button", { type: "button", onClick: logoutHandler, onKeyDown: keyDownHandler }, "Log Out"));
};

// EXTERNAL MODULE: external "react-table"
var external_react_table_ = __webpack_require__(3);

// CONCATENATED MODULE: ./src/context/combinedDataContext/index.tsx
/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */



/**
 * Used to provide both a [Dataset](https://docs.inrupt.com/developer-tools/javascript/client-libraries/reference/glossary/#term-SolidDataset) and [Thing](https://docs.inrupt.com/developer-tools/javascript/client-libraries/reference/glossary/#term-Thing) to child components through context, as used by various provided components and the useDataset and useThing hooks.
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function CombinedDataProvider(props) {
    const { children, solidDataset, datasetUrl, thing, thingUrl, onError, } = props;
    return (external_react_default.a.createElement(DatasetProvider, { onError: onError, solidDataset: solidDataset, datasetUrl: datasetUrl },
        external_react_default.a.createElement(ThingProvider, { thing: thing, thingUrl: thingUrl }, children)));
}
/* harmony default export */ var combinedDataContext = (CombinedDataProvider);

// CONCATENATED MODULE: ./src/components/table/index.tsx
/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var table_rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* eslint-disable react/jsx-props-no-spreading */




/**
 * To be used as the only children of a Table component. Each column represents one property of the Things passed to the Table.
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function TableColumn(props) {
    throw new Error("Can't use TableColumn outside a Table.");
}
/**
 * Displays values from an array of [Things](https://docs.inrupt.com/developer-tools/javascript/client-libraries/reference/glossary/#term-Thing) as table rows, with each column showing a given property of those [Things](https://docs.inrupt.com/developer-tools/javascript/client-libraries/reference/glossary/#term-Thing).
 */
function Table(_a) {
    var { children, things, filter, ascIndicator, descIndicator, getRowProps } = _a, tableProps = table_rest(_a, ["children", "things", "filter", "ascIndicator", "descIndicator", "getRowProps"]);
    const { columns, data } = Object(external_react_["useMemo"])(() => {
        const columnsArray = [];
        const dataArray = things.map(() => ({}));
        // loop through each column
        external_react_["Children"].forEach(children, (column, colIndex) => {
            const { property, header, body, dataType = "string", locale, multiple = false, sortable, filterable, } = column.props;
            // add heading
            columnsArray.push({
                Header: header !== null && header !== void 0 ? header : `${property}`,
                accessor: `col${colIndex}`,
                disableGlobalFilter: !filterable,
                disableSortBy: !sortable,
                Cell: body !== null && body !== void 0 ? body : (({ value }) => (value != null ? `${value}` : "")),
            });
            // add each each value to data
            things.forEach((thing, i) => {
                dataArray[i][`col${colIndex}`] = multiple
                    ? getValueByTypeAll(dataType, thing.thing, property, locale)
                    : getValueByType(dataType, thing.thing, property, locale);
            });
        });
        return { columns: columnsArray, data: dataArray };
    }, [children, things]);
    const tableInstance = Object(external_react_table_["useTable"])({ columns, data, initialState: { globalFilter: filter || undefined } }, external_react_table_["useGlobalFilter"], external_react_table_["useSortBy"]);
    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, } = tableInstance;
    return (external_react_default.a.createElement("table", Object.assign({}, getTableProps(), tableProps),
        external_react_default.a.createElement("thead", null, headerGroups.map((headerGroup) => (external_react_default.a.createElement("tr", Object.assign({}, headerGroup.getHeaderGroupProps()), headerGroup.headers.map((column) => (external_react_default.a.createElement("th", Object.assign({}, column.getHeaderProps(column.getSortByToggleProps())),
            column.render("Header"),
            column.isSorted &&
                (column.isSortedDesc ? descIndicator : ascIndicator)))))))),
        external_react_default.a.createElement("tbody", Object.assign({}, getTableBodyProps()), rows.map((row) => {
            prepareRow(row);
            const rowDataset = things[row.index].dataset;
            const rowThing = things[row.index].thing;
            return (external_react_default.a.createElement("tr", Object.assign({}, row.getRowProps(getRowProps(row, rowThing, rowDataset))),
                external_react_default.a.createElement(combinedDataContext, { solidDataset: rowDataset, thing: rowThing }, row.cells.map((cell) => {
                    return (external_react_default.a.createElement("td", Object.assign({}, cell.getCellProps()), cell.render("Cell")));
                }))));
        }))));
}
Table.defaultProps = {
    filter: undefined,
    ascIndicator: (external_react_default.a.createElement("span", { role: "img", "aria-label": "Sorted in ascending order" },
        " ",
        "\uD83D\uDD3C")),
    descIndicator: (external_react_default.a.createElement("span", { role: "img", "aria-label": "Sorted in descending order" },
        " ",
        "\uD83D\uDD3D")),
    getRowProps: () => ({}),
};

// CONCATENATED MODULE: ./src/components/text/index.tsx
/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var text_rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};




/**
 * Retrieves and displays a string from a given [Dataset](https://docs.inrupt.com/developer-tools/javascript/client-libraries/reference/glossary/#term-SolidDataset)/[Thing](https://docs.inrupt.com/developer-tools/javascript/client-libraries/reference/glossary/#term-Thing)/property. Can also be used to set/update and persist a string value.
 */
function Text(_a) {
    var { thing: propThing, solidDataset: propDataset, property: propProperty, properties: propProperties, saveDatasetTo, locale, onSave, onError, edit, autosave, inputProps } = _a, other = text_rest(_a, ["thing", "solidDataset", "property", "properties", "saveDatasetTo", "locale", "onSave", "onError", "edit", "autosave", "inputProps"]);
    const { fetch } = Object(external_react_["useContext"])(SessionContext);
    const { error, value, thing, property, dataset, setDataset } = useProperty({
        dataset: propDataset,
        thing: propThing,
        property: propProperty,
        properties: propProperties,
        type: "string",
        locale,
    });
    Object(external_react_["useEffect"])(() => {
        if (error && onError) {
            onError(error);
        }
    }, [error, onError]);
    const [text, setText] = Object(external_react_["useState"])(value);
    const [, setErrorState] = Object(external_react_["useState"])();
    const [initialValue, setInitialValue] = Object(external_react_["useState"])(value);
    /* Save text value in the pod */
    const saveHandler = async (e) => {
        if (initialValue !== e.target.value && thing && dataset) {
            const newValue = e.target.value;
            let updatedResource;
            if (locale) {
                updatedResource = Object(solid_client_["setStringWithLocale"])(thing, property, newValue, locale);
            }
            else {
                updatedResource = Object(solid_client_["setStringNoLocale"])(thing, property, newValue);
            }
            try {
                let savedDataset;
                if (saveDatasetTo) {
                    savedDataset = await Object(solid_client_["saveSolidDatasetAt"])(saveDatasetTo, Object(solid_client_["setThing"])(dataset, updatedResource), { fetch });
                    setDataset(savedDataset);
                }
                else if (Object(solid_client_["hasResourceInfo"])(dataset)) {
                    savedDataset = await Object(solid_client_["saveSolidDatasetAt"])(Object(solid_client_["getSourceUrl"])(dataset), Object(solid_client_["setThing"])(dataset, updatedResource), { fetch });
                    setDataset(savedDataset);
                }
                else {
                    setErrorState(() => {
                        throw new Error("Please provide saveDatasetTo location for new data");
                    });
                }
                if (onSave) {
                    onSave(savedDataset, updatedResource);
                }
            }
            catch (saveError) {
                if (onError) {
                    onError(saveError);
                }
            }
        }
    };
    if (!dataset && !thing) {
        // TODO: provide option for user to pass in loader
        return external_react_default.a.createElement("h3", null, "fetching data in progress");
    }
    return (external_react_default.a.createElement(external_react_default.a.Fragment, null,
        // eslint-disable-next-line react/jsx-props-no-spreading
        !edit && dataset && thing && external_react_default.a.createElement("span", Object.assign({}, other), text),
        edit && dataset && thing && (external_react_default.a.createElement("input", Object.assign({ type: inputProps && inputProps.type ? inputProps.type : "text" }, inputProps, { onFocus: (e) => setInitialValue(e.target.value), onChange: (e) => setText(e.target.value), onBlur: (e) => autosave && saveHandler(e), value: text || "" })))));
}
Text.defaultProps = {
    autosave: false,
    edit: false,
};

// CONCATENATED MODULE: ./src/components/video/index.tsx
/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var video_rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};



/**
 * Fetches and displays a video, from a src found at a given property of a given Thing. Can also be used to upload a new/replacement video file.
 */
function Video(_a) {
    var { property: propProperty, properties: propProperties, thing: propThing, edit, autosave, onSave, onError, maxSize, inputProps, errorComponent: ErrorComponent } = _a, videoOptions = video_rest(_a, ["property", "properties", "thing", "edit", "autosave", "onSave", "onError", "maxSize", "inputProps", "errorComponent"]);
    const { fetch } = Object(external_react_["useContext"])(SessionContext);
    const values = useProperty({
        thing: propThing,
        property: propProperty,
        properties: propProperties,
        type: "url",
    });
    const { value } = values;
    let { error: thingError } = values;
    if (!edit && !value) {
        thingError = new Error("URL not found for given property");
    }
    const [error, setError] = Object(external_react_["useState"])(thingError);
    Object(external_react_["useEffect"])(() => {
        if (error) {
            if (onError) {
                onError(error);
            }
        }
    }, [error, onError, ErrorComponent]);
    const [videoObjectUrl, setVideoObjectUrl] = Object(external_react_["useState"])("");
    Object(external_react_["useEffect"])(() => {
        if (value) {
            retrieveFile(value, fetch)
                .then(setVideoObjectUrl)
                .catch((retrieveError) => {
                setError(retrieveError);
                if (onError) {
                    onError(retrieveError);
                }
                if (ErrorComponent) {
                    setVideoObjectUrl("");
                }
            });
        }
    }, [value, onError, setError, fetch, ErrorComponent]);
    const handleChange = async (input) => {
        const fileList = input.files;
        if (autosave && fileList && fileList.length > 0 && value) {
            const newObjectUrl = await overwriteFile(value, fileList[0], input, fetch, maxSize, onSave, onError);
            if (newObjectUrl) {
                setVideoObjectUrl(newObjectUrl);
            }
        }
    };
    let videoComponent = null;
    if (error && ErrorComponent) {
        videoComponent = external_react_default.a.createElement(ErrorComponent, { error: error });
    }
    else if (value) {
        videoComponent = (
        /* eslint jsx-a11y/media-has-caption: 0, react/jsx-props-no-spreading: 0 */
        external_react_default.a.createElement("video", Object.assign({ src: videoObjectUrl || value, controls: true }, videoOptions)));
    }
    return (external_react_default.a.createElement(external_react_default.a.Fragment, null,
        videoComponent,
        edit && (external_react_default.a.createElement("input", Object.assign({}, inputProps, { type: "file", accept: "video/*", onChange: (e) => handleChange(e.target) })))));
}

// CONCATENATED MODULE: ./src/hooks/useSession/index.tsx
/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


function useSession() {
    const { session, sessionRequestInProgress, fetch, login, logout, } = Object(external_react_["useContext"])(SessionContext);
    return {
        session,
        sessionRequestInProgress,
        fetch,
        login,
        logout,
    };
}

// CONCATENATED MODULE: ./src/hooks/useThing/index.tsx
/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */




function useThing(datasetIri, thingIri, 
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
options
// eslint-disable-next-line @typescript-eslint/no-explicit-any
) {
    const { dataset, error } = useDataset(datasetIri, options);
    const { thing: thingFromContext } = Object(external_react_["useContext"])(thingContext);
    if (!thingIri) {
        return { thing: thingFromContext || undefined, error };
    }
    if (!dataset) {
        return { thing: null, error };
    }
    const thing = Object(solid_client_["getThing"])(dataset, thingIri);
    return { thing, error };
}

// CONCATENATED MODULE: ./src/index.ts
/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

















/***/ })
/******/ ])));
//# sourceMappingURL=index.js.map